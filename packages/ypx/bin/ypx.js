#!/usr/bin/env node
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argv = void 0;

var _index = _interopRequireDefault(require("../index"));

var _util = require("util");

var _yargs = _interopRequireDefault(require("yargs"));

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let inputArgv = process.argv.slice(2);
let argv = (0, _yargs.default)(inputArgv).parserConfiguration({
  'populate--': true
}).example(`$0 mocha`, ``).example(`$0 -p esm ts-node mocha -- -r esm`, ``).option('package', {
  desc: `define the package to be installed`,
  alias: 'p',
  array: true,
  string: true
}).option('quiet', {
  desc: `Suppressed any output from npx itself (progress bars, error messages, install reports)`,
  alias: 'q',
  boolean: true
}).option('ignoreExisting', {
  desc: `skip check packages exists or not`,
  boolean: true,
  conflicts: ['noInstall']
}).option('noInstall', {
  desc: `skip install packages`,
  boolean: true
}).option('preferOffline', {
  desc: `use network only if dependencies are not available in local cache`,
  boolean: true
}).help(`h`).showHelpOnFail(true).argv;
exports.argv = argv;
let {
  p = []
} = argv;

if (!p || !p.length) {
  if (argv._.length !== 1) {
    throw new Error(`current not support this syntax, ${(0, _util.inspect)(argv)}`);
  } else {
    p = [argv._.shift()];
  }
}

if (argv._.length && argv['--'].length) {
  throw new Error(`current not support this syntax, ${inputArgv}`);
}

_bluebird.default.resolve((0, _index.default)({ ...argv,
  package: p
}, inputArgv)).tapCatch(e => {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInlweC50cyJdLCJuYW1lcyI6WyJpbnB1dEFyZ3YiLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwicGFyc2VyQ29uZmlndXJhdGlvbiIsImV4YW1wbGUiLCJvcHRpb24iLCJkZXNjIiwiYWxpYXMiLCJhcnJheSIsInN0cmluZyIsImJvb2xlYW4iLCJjb25mbGljdHMiLCJoZWxwIiwic2hvd0hlbHBPbkZhaWwiLCJwIiwibGVuZ3RoIiwiXyIsIkVycm9yIiwic2hpZnQiLCJCbHVlYmlyZCIsInJlc29sdmUiLCJwYWNrYWdlIiwidGFwQ2F0Y2giLCJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFFQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQWhCO0FBRU8sSUFBSUQsSUFBSSxHQUFHLG9CQUFNRixTQUFOLEVBQ2hCSSxtQkFEZ0IsQ0FDSTtBQUNwQixnQkFBYztBQURNLENBREosRUFJaEJDLE9BSmdCLENBSVAsVUFKTyxFQUlLLEVBSkwsRUFLaEJBLE9BTGdCLENBS1AsbUNBTE8sRUFLOEIsRUFMOUIsRUFNaEJDLE1BTmdCLENBTVQsU0FOUyxFQU1FO0FBQ2xCQyxFQUFBQSxJQUFJLEVBQUcsb0NBRFc7QUFFbEJDLEVBQUFBLEtBQUssRUFBRSxHQUZXO0FBR2xCQyxFQUFBQSxLQUFLLEVBQUUsSUFIVztBQUlsQkMsRUFBQUEsTUFBTSxFQUFFO0FBSlUsQ0FORixFQVloQkosTUFaZ0IsQ0FZVCxPQVpTLEVBWUE7QUFDaEJDLEVBQUFBLElBQUksRUFBRyx3RkFEUztBQUVoQkMsRUFBQUEsS0FBSyxFQUFFLEdBRlM7QUFHaEJHLEVBQUFBLE9BQU8sRUFBRTtBQUhPLENBWkEsRUFpQmhCTCxNQWpCZ0IsQ0FpQlQsZ0JBakJTLEVBaUJTO0FBQ3pCQyxFQUFBQSxJQUFJLEVBQUcsbUNBRGtCO0FBRXpCSSxFQUFBQSxPQUFPLEVBQUUsSUFGZ0I7QUFHekJDLEVBQUFBLFNBQVMsRUFBRSxDQUFDLFdBQUQ7QUFIYyxDQWpCVCxFQXNCaEJOLE1BdEJnQixDQXNCVCxXQXRCUyxFQXNCSTtBQUNwQkMsRUFBQUEsSUFBSSxFQUFHLHVCQURhO0FBRXBCSSxFQUFBQSxPQUFPLEVBQUU7QUFGVyxDQXRCSixFQTBCaEJMLE1BMUJnQixDQTBCVCxlQTFCUyxFQTBCUTtBQUN4QkMsRUFBQUEsSUFBSSxFQUFHLG1FQURpQjtBQUV4QkksRUFBQUEsT0FBTyxFQUFFO0FBRmUsQ0ExQlIsRUE4QmhCRSxJQTlCZ0IsQ0E4QlYsR0E5QlUsRUErQmhCQyxjQS9CZ0IsQ0ErQkQsSUEvQkMsRUFnQ2hCWixJQWhDSzs7QUFxRFAsSUFBSTtBQUFFYSxFQUFBQSxDQUFDLEdBQUc7QUFBTixJQUFhYixJQUFqQjs7QUFJQSxJQUFJLENBQUNhLENBQUQsSUFBTSxDQUFDQSxDQUFDLENBQUNDLE1BQWIsRUFDQTtBQUNDLE1BQUlkLElBQUksQ0FBQ2UsQ0FBTCxDQUFPRCxNQUFQLEtBQWtCLENBQXRCLEVBQ0E7QUFDQyxVQUFNLElBQUlFLEtBQUosQ0FBVyxvQ0FBbUMsbUJBQVFoQixJQUFSLENBQWMsRUFBNUQsQ0FBTjtBQUNBLEdBSEQsTUFLQTtBQUNDYSxJQUFBQSxDQUFDLEdBQUcsQ0FBQ2IsSUFBSSxDQUFDZSxDQUFMLENBQU9FLEtBQVAsRUFBRCxDQUFKO0FBQ0E7QUFDRDs7QUFFRCxJQUFJakIsSUFBSSxDQUFDZSxDQUFMLENBQU9ELE1BQVAsSUFBaUJkLElBQUksQ0FBQyxJQUFELENBQUosQ0FBV2MsTUFBaEMsRUFDQTtBQUNDLFFBQU0sSUFBSUUsS0FBSixDQUFXLG9DQUFtQ2xCLFNBQVUsRUFBeEQsQ0FBTjtBQUNBOztBQUVEb0Isa0JBQVNDLE9BQVQsQ0FBaUIsb0JBQUksRUFDbkIsR0FBR25CLElBRGdCO0FBRW5Cb0IsRUFBQUEsT0FBTyxFQUFFUDtBQUZVLENBQUosRUFHYmYsU0FIYSxDQUFqQixFQUlFdUIsUUFKRixDQUlXQyxDQUFDLElBQUksQ0FFZCxDQU5GIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5pbXBvcnQgcGFyc2UsIHsgZGV0YWlsZWQsIFN5bUlucHV0QXJncyB9IGZyb20gJ3lhcmdzLXBhcnNlci1leHRyYSdcbmltcG9ydCBZUFggZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJ3V0aWwnXG5pbXBvcnQgeyBJWVBYQXJndW1lbnRzIH0gZnJvbSAnLi4vbGliL3R5cGVzJztcbmltcG9ydCB5YXJncyBmcm9tICd5YXJncydcbmltcG9ydCBCbHVlYmlyZCBmcm9tICdibHVlYmlyZCc7XG5cbmxldCBpbnB1dEFyZ3YgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbmV4cG9ydCBsZXQgYXJndiA9IHlhcmdzKGlucHV0QXJndilcblx0LnBhcnNlckNvbmZpZ3VyYXRpb24oe1xuXHRcdCdwb3B1bGF0ZS0tJzogdHJ1ZSxcblx0fSlcblx0LmV4YW1wbGUoYCQwIG1vY2hhYCwgYGApXG5cdC5leGFtcGxlKGAkMCAtcCBlc20gdHMtbm9kZSBtb2NoYSAtLSAtciBlc21gLCBgYClcblx0Lm9wdGlvbigncGFja2FnZScsIHtcblx0XHRkZXNjOiBgZGVmaW5lIHRoZSBwYWNrYWdlIHRvIGJlIGluc3RhbGxlZGAsXG5cdFx0YWxpYXM6ICdwJyxcblx0XHRhcnJheTogdHJ1ZSxcblx0XHRzdHJpbmc6IHRydWUsXG5cdH0pXG5cdC5vcHRpb24oJ3F1aWV0Jywge1xuXHRcdGRlc2M6IGBTdXBwcmVzc2VkIGFueSBvdXRwdXQgZnJvbSBucHggaXRzZWxmIChwcm9ncmVzcyBiYXJzLCBlcnJvciBtZXNzYWdlcywgaW5zdGFsbCByZXBvcnRzKWAsXG5cdFx0YWxpYXM6ICdxJyxcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQub3B0aW9uKCdpZ25vcmVFeGlzdGluZycsIHtcblx0XHRkZXNjOiBgc2tpcCBjaGVjayBwYWNrYWdlcyBleGlzdHMgb3Igbm90YCxcblx0XHRib29sZWFuOiB0cnVlLFxuXHRcdGNvbmZsaWN0czogWydub0luc3RhbGwnXSxcblx0fSlcblx0Lm9wdGlvbignbm9JbnN0YWxsJywge1xuXHRcdGRlc2M6IGBza2lwIGluc3RhbGwgcGFja2FnZXNgLFxuXHRcdGJvb2xlYW46IHRydWUsXG5cdH0pXG5cdC5vcHRpb24oJ3ByZWZlck9mZmxpbmUnLCB7XG5cdFx0ZGVzYzogYHVzZSBuZXR3b3JrIG9ubHkgaWYgZGVwZW5kZW5jaWVzIGFyZSBub3QgYXZhaWxhYmxlIGluIGxvY2FsIGNhY2hlYCxcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQuaGVscChgaGApXG5cdC5zaG93SGVscE9uRmFpbCh0cnVlKVxuXHQuYXJndiBhcyBJWVBYQXJndW1lbnRzXG47XG5cbi8qXG5sZXQgYXJndiA9IHBhcnNlKHByb2Nlc3MuYXJndi5zbGljZSgyKSwge1xuXHRhbGlhczoge1xuXHRcdHBhY2thZ2U6IFsncCddLFxuXHRcdHF1aWV0OiBbJ3EnXSxcblx0fSxcblx0YXJyYXk6IFsncGFja2FnZSddLFxuXHRib29sZWFuOiBbXG5cdFx0J3ByZWZlck9mZmxpbmUnLFxuXHRcdCdxdWlldCcsXG5cdFx0J2lnbm9yZUV4aXN0aW5nJyxcblx0XSxcblx0bm9ybWFsaXplOiBbXG5cdFx0J2N3ZCcsXG5cdF0sXG59KSBhcyBJWVBYQXJndW1lbnRzO1xuICovXG5cbmxldCB7IHAgPSBbXSB9ID0gYXJndiBhcyB0eXBlb2YgYXJndiAmIHtcblx0cDogc3RyaW5nW10sXG59O1xuXG5pZiAoIXAgfHwgIXAubGVuZ3RoKVxue1xuXHRpZiAoYXJndi5fLmxlbmd0aCAhPT0gMSlcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvcihgY3VycmVudCBub3Qgc3VwcG9ydCB0aGlzIHN5bnRheCwgJHtpbnNwZWN0KGFyZ3YpfWApXG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0cCA9IFthcmd2Ll8uc2hpZnQoKV07XG5cdH1cbn1cblxuaWYgKGFyZ3YuXy5sZW5ndGggJiYgYXJndlsnLS0nXS5sZW5ndGgpXG57XG5cdHRocm93IG5ldyBFcnJvcihgY3VycmVudCBub3Qgc3VwcG9ydCB0aGlzIHN5bnRheCwgJHtpbnB1dEFyZ3Z9YClcbn1cblxuQmx1ZWJpcmQucmVzb2x2ZShZUFgoe1xuXHRcdC4uLmFyZ3YsXG5cdFx0cGFja2FnZTogcCxcblx0fSwgaW5wdXRBcmd2KSlcblx0LnRhcENhdGNoKGUgPT4ge1xuXG5cdH0pXG47XG4iXX0=