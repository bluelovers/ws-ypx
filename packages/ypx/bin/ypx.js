#!/usr/bin/env node
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argv = void 0;

var _index = _interopRequireDefault(require("../index"));

var _util = require("util");

var _yargs = _interopRequireDefault(require("yargs"));

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let inputArgv = process.argv.slice(2);
let argv = (0, _yargs.default)(inputArgv).parserConfiguration({
  'populate--': true
}).example(`$0 mocha`, ``).example(`$0 -p esm ts-node mocha -- -r esm`, ``).option('package', {
  desc: `define the package to be installed`,
  alias: 'p',
  array: true,
  string: true
}).option('quiet', {
  desc: `Suppressed any output from npx itself (progress bars, error messages, install reports)`,
  alias: 'q',
  boolean: true
}).option('ignoreExisting', {
  desc: `skip check packages exists or not`,
  boolean: true,
  conflicts: ['noInstall']
}).option('noInstall', {
  desc: `skip install packages`,
  boolean: true
}).option('preferOffline', {
  desc: `use network only if dependencies are not available in local cache`,
  boolean: true
}).help(`h`).showHelpOnFail(true).argv;
exports.argv = argv;
let {
  p = []
} = argv;

if (!p || !p.length) {
  if (argv._.length !== 1) {
    throw new Error(`current not support this syntax, ${(0, _util.inspect)(argv)}`);
  } else {
    p = [argv._.shift()];
  }
}

if (argv._.length && argv['--'].length) {
  throw new Error(`current not support this syntax, ${inputArgv}`);
}

_bluebird.default.resolve((0, _index.default)({ ...argv,
  package: p
}, inputArgv)).tapCatch(e => {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInlweC50cyJdLCJuYW1lcyI6WyJpbnB1dEFyZ3YiLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwicGFyc2VyQ29uZmlndXJhdGlvbiIsImV4YW1wbGUiLCJvcHRpb24iLCJkZXNjIiwiYWxpYXMiLCJhcnJheSIsInN0cmluZyIsImJvb2xlYW4iLCJjb25mbGljdHMiLCJoZWxwIiwic2hvd0hlbHBPbkZhaWwiLCJwIiwibGVuZ3RoIiwiXyIsIkVycm9yIiwic2hpZnQiLCJCbHVlYmlyZCIsInJlc29sdmUiLCJwYWNrYWdlIiwidGFwQ2F0Y2giLCJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFFQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQWhCO0FBRU8sSUFBSUQsSUFBSSxHQUFHLG9CQUFNRixTQUFOLEVBQ2hCSSxtQkFEZ0IsQ0FDSTtBQUNwQixnQkFBYztBQURNLENBREosRUFJaEJDLE9BSmdCLENBSVAsVUFKTyxFQUlLLEVBSkwsRUFLaEJBLE9BTGdCLENBS1AsbUNBTE8sRUFLOEIsRUFMOUIsRUFNaEJDLE1BTmdCLENBTVQsU0FOUyxFQU1FO0FBQ2xCQyxFQUFBQSxJQUFJLEVBQUcsb0NBRFc7QUFFbEJDLEVBQUFBLEtBQUssRUFBRSxHQUZXO0FBR2xCQyxFQUFBQSxLQUFLLEVBQUUsSUFIVztBQUlsQkMsRUFBQUEsTUFBTSxFQUFFO0FBSlUsQ0FORixFQVloQkosTUFaZ0IsQ0FZVCxPQVpTLEVBWUE7QUFDaEJDLEVBQUFBLElBQUksRUFBRyx3RkFEUztBQUVoQkMsRUFBQUEsS0FBSyxFQUFFLEdBRlM7QUFHaEJHLEVBQUFBLE9BQU8sRUFBRTtBQUhPLENBWkEsRUFpQmhCTCxNQWpCZ0IsQ0FpQlQsZ0JBakJTLEVBaUJTO0FBQ3pCQyxFQUFBQSxJQUFJLEVBQUcsbUNBRGtCO0FBRXpCSSxFQUFBQSxPQUFPLEVBQUUsSUFGZ0I7QUFHekJDLEVBQUFBLFNBQVMsRUFBRSxDQUFDLFdBQUQ7QUFIYyxDQWpCVCxFQXNCaEJOLE1BdEJnQixDQXNCVCxXQXRCUyxFQXNCSTtBQUNwQkMsRUFBQUEsSUFBSSxFQUFHLHVCQURhO0FBRXBCSSxFQUFBQSxPQUFPLEVBQUU7QUFGVyxDQXRCSixFQTBCaEJMLE1BMUJnQixDQTBCVCxlQTFCUyxFQTBCUTtBQUN4QkMsRUFBQUEsSUFBSSxFQUFHLG1FQURpQjtBQUV4QkksRUFBQUEsT0FBTyxFQUFFO0FBRmUsQ0ExQlIsRUE4QmhCRSxJQTlCZ0IsQ0E4QlYsR0E5QlUsRUErQmhCQyxjQS9CZ0IsQ0ErQkQsSUEvQkMsRUFnQ2hCWixJQWhDSzs7QUFxRFAsSUFBSTtBQUFFYSxFQUFBQSxDQUFDLEdBQUc7QUFBTixJQUFhYixJQUFqQjs7QUFJQSxJQUFJLENBQUNhLENBQUQsSUFBTSxDQUFDQSxDQUFDLENBQUNDLE1BQWIsRUFDQTtBQUNDLE1BQUlkLElBQUksQ0FBQ2UsQ0FBTCxDQUFPRCxNQUFQLEtBQWtCLENBQXRCLEVBQ0E7QUFDQyxVQUFNLElBQUlFLEtBQUosQ0FBVyxvQ0FBbUMsbUJBQVFoQixJQUFSLENBQWMsRUFBNUQsQ0FBTjtBQUNBLEdBSEQsTUFLQTtBQUNDYSxJQUFBQSxDQUFDLEdBQUcsQ0FBQ2IsSUFBSSxDQUFDZSxDQUFMLENBQU9FLEtBQVAsRUFBRCxDQUFKO0FBQ0E7QUFDRDs7QUFFRCxJQUFJakIsSUFBSSxDQUFDZSxDQUFMLENBQU9ELE1BQVAsSUFBaUJkLElBQUksQ0FBQyxJQUFELENBQUosQ0FBV2MsTUFBaEMsRUFDQTtBQUNDLFFBQU0sSUFBSUUsS0FBSixDQUFXLG9DQUFtQ2xCLFNBQVUsRUFBeEQsQ0FBTjtBQUNBOztBQUVEb0Isa0JBQVNDLE9BQVQsQ0FBaUIsb0JBQUksRUFDbkIsR0FBR25CLElBRGdCO0FBRW5Cb0IsRUFBQUEsT0FBTyxFQUFFUDtBQUZVLENBQUosRUFHYmYsU0FIYSxDQUFqQixFQUlFdUIsUUFKRixDQUlXQyxDQUFDLElBQUksQ0FFZCxDQU5GIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5pbXBvcnQgWVBYIGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICd1dGlsJ1xuaW1wb3J0IHsgSVlQWEFyZ3VtZW50cyB9IGZyb20gJy4uL2xpYi90eXBlcyc7XG5pbXBvcnQgeWFyZ3MgZnJvbSAneWFyZ3MnXG5pbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuXG5sZXQgaW5wdXRBcmd2ID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5leHBvcnQgbGV0IGFyZ3YgPSB5YXJncyhpbnB1dEFyZ3YpXG5cdC5wYXJzZXJDb25maWd1cmF0aW9uKHtcblx0XHQncG9wdWxhdGUtLSc6IHRydWUsXG5cdH0pXG5cdC5leGFtcGxlKGAkMCBtb2NoYWAsIGBgKVxuXHQuZXhhbXBsZShgJDAgLXAgZXNtIHRzLW5vZGUgbW9jaGEgLS0gLXIgZXNtYCwgYGApXG5cdC5vcHRpb24oJ3BhY2thZ2UnLCB7XG5cdFx0ZGVzYzogYGRlZmluZSB0aGUgcGFja2FnZSB0byBiZSBpbnN0YWxsZWRgLFxuXHRcdGFsaWFzOiAncCcsXG5cdFx0YXJyYXk6IHRydWUsXG5cdFx0c3RyaW5nOiB0cnVlLFxuXHR9KVxuXHQub3B0aW9uKCdxdWlldCcsIHtcblx0XHRkZXNjOiBgU3VwcHJlc3NlZCBhbnkgb3V0cHV0IGZyb20gbnB4IGl0c2VsZiAocHJvZ3Jlc3MgYmFycywgZXJyb3IgbWVzc2FnZXMsIGluc3RhbGwgcmVwb3J0cylgLFxuXHRcdGFsaWFzOiAncScsXG5cdFx0Ym9vbGVhbjogdHJ1ZSxcblx0fSlcblx0Lm9wdGlvbignaWdub3JlRXhpc3RpbmcnLCB7XG5cdFx0ZGVzYzogYHNraXAgY2hlY2sgcGFja2FnZXMgZXhpc3RzIG9yIG5vdGAsXG5cdFx0Ym9vbGVhbjogdHJ1ZSxcblx0XHRjb25mbGljdHM6IFsnbm9JbnN0YWxsJ10sXG5cdH0pXG5cdC5vcHRpb24oJ25vSW5zdGFsbCcsIHtcblx0XHRkZXNjOiBgc2tpcCBpbnN0YWxsIHBhY2thZ2VzYCxcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQub3B0aW9uKCdwcmVmZXJPZmZsaW5lJywge1xuXHRcdGRlc2M6IGB1c2UgbmV0d29yayBvbmx5IGlmIGRlcGVuZGVuY2llcyBhcmUgbm90IGF2YWlsYWJsZSBpbiBsb2NhbCBjYWNoZWAsXG5cdFx0Ym9vbGVhbjogdHJ1ZSxcblx0fSlcblx0LmhlbHAoYGhgKVxuXHQuc2hvd0hlbHBPbkZhaWwodHJ1ZSlcblx0LmFyZ3YgYXMgSVlQWEFyZ3VtZW50c1xuO1xuXG4vKlxubGV0IGFyZ3YgPSBwYXJzZShwcm9jZXNzLmFyZ3Yuc2xpY2UoMiksIHtcblx0YWxpYXM6IHtcblx0XHRwYWNrYWdlOiBbJ3AnXSxcblx0XHRxdWlldDogWydxJ10sXG5cdH0sXG5cdGFycmF5OiBbJ3BhY2thZ2UnXSxcblx0Ym9vbGVhbjogW1xuXHRcdCdwcmVmZXJPZmZsaW5lJyxcblx0XHQncXVpZXQnLFxuXHRcdCdpZ25vcmVFeGlzdGluZycsXG5cdF0sXG5cdG5vcm1hbGl6ZTogW1xuXHRcdCdjd2QnLFxuXHRdLFxufSkgYXMgSVlQWEFyZ3VtZW50cztcbiAqL1xuXG5sZXQgeyBwID0gW10gfSA9IGFyZ3YgYXMgdHlwZW9mIGFyZ3YgJiB7XG5cdHA6IHN0cmluZ1tdLFxufTtcblxuaWYgKCFwIHx8ICFwLmxlbmd0aClcbntcblx0aWYgKGFyZ3YuXy5sZW5ndGggIT09IDEpXG5cdHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGN1cnJlbnQgbm90IHN1cHBvcnQgdGhpcyBzeW50YXgsICR7aW5zcGVjdChhcmd2KX1gKVxuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdHAgPSBbYXJndi5fLnNoaWZ0KCldO1xuXHR9XG59XG5cbmlmIChhcmd2Ll8ubGVuZ3RoICYmIGFyZ3ZbJy0tJ10ubGVuZ3RoKVxue1xuXHR0aHJvdyBuZXcgRXJyb3IoYGN1cnJlbnQgbm90IHN1cHBvcnQgdGhpcyBzeW50YXgsICR7aW5wdXRBcmd2fWApXG59XG5cbkJsdWViaXJkLnJlc29sdmUoWVBYKHtcblx0XHQuLi5hcmd2LFxuXHRcdHBhY2thZ2U6IHAsXG5cdH0sIGlucHV0QXJndikpXG5cdC50YXBDYXRjaChlID0+IHtcblxuXHR9KVxuO1xuIl19