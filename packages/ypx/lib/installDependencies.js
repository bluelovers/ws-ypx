Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installDependencies = installDependencies;
exports.default = void 0;

var _crossSpawnExtra = _interopRequireDefault(require("cross-spawn-extra"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _findCommand = _interopRequireDefault(require("./findCommand"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function installDependencies(argv, runtime) {
  let pkgs = argv.package.slice();

  if (argv.ignoreExisting) {} else {
    pkgs = await _bluebird.default.resolve(pkgs).filter(async name => {
      let r;

      try {
        r = require.resolve(name + '/package.json', {
          paths: [argv.cwd]
        });
        runtime.skipInstall[name] = r;
        return false;
      } catch (e) {}

      if (r = await (0, _findCommand.default)(name, argv.cwd)) {
        runtime.skipInstall[name] = r;
        return false;
      }

      return true;
    });
  }

  if (pkgs.length) {
    if (argv.noInstall) {
      pkgs.forEach(name => runtime.skipInstall[name] = undefined);
    } else {
      await (0, _crossSpawnExtra.default)('yarn', ['add', ...pkgs, argv.quiet ? '--quiet' : null, argv.preferOffline ? '--prefer-offline' : null, '--link-duplicates', '--no-node-version-check', '--ignore-optional', argv.userconfig ? '--use-yarnrc' : null, argv.userconfig ? argv.userconfig : null].filter(v => v != null), {
        stripAnsi: true,
        cwd: runtime.tmpDir,
        stdio: argv.quiet ? undefined : 'inherit'
      });
    }
  }
}

var _default = installDependencies;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGxEZXBlbmRlbmNpZXMudHMiXSwibmFtZXMiOlsiaW5zdGFsbERlcGVuZGVuY2llcyIsImFyZ3YiLCJydW50aW1lIiwicGtncyIsInBhY2thZ2UiLCJzbGljZSIsImlnbm9yZUV4aXN0aW5nIiwiQmx1ZWJpcmQiLCJyZXNvbHZlIiwiZmlsdGVyIiwibmFtZSIsInIiLCJyZXF1aXJlIiwicGF0aHMiLCJjd2QiLCJza2lwSW5zdGFsbCIsImUiLCJsZW5ndGgiLCJub0luc3RhbGwiLCJmb3JFYWNoIiwidW5kZWZpbmVkIiwicXVpZXQiLCJwcmVmZXJPZmZsaW5lIiwidXNlcmNvbmZpZyIsInYiLCJzdHJpcEFuc2kiLCJ0bXBEaXIiLCJzdGRpbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFHTyxlQUFlQSxtQkFBZixDQUFtQ0MsSUFBbkMsRUFBd0RDLE9BQXhELEVBQ1A7QUFDQyxNQUFJQyxJQUFJLEdBQUdGLElBQUksQ0FBQ0csT0FBTCxDQUFhQyxLQUFiLEVBQVg7O0FBRUEsTUFBSUosSUFBSSxDQUFDSyxjQUFULEVBQ0EsQ0FFQyxDQUhELE1BS0E7QUFDQ0gsSUFBQUEsSUFBSSxHQUFHLE1BQU1JLGtCQUFTQyxPQUFULENBQWlCTCxJQUFqQixFQUNYTSxNQURXLENBQ0osTUFBT0MsSUFBUCxJQUFnQjtBQUV2QixVQUFJQyxDQUFKOztBQUVBLFVBQ0E7QUFDQ0EsUUFBQUEsQ0FBQyxHQUFHQyxPQUFPLENBQUNKLE9BQVIsQ0FBZ0JFLElBQUksR0FBRyxlQUF2QixFQUF3QztBQUMzQ0csVUFBQUEsS0FBSyxFQUFFLENBQUNaLElBQUksQ0FBQ2EsR0FBTjtBQURvQyxTQUF4QyxDQUFKO0FBR0FaLFFBQUFBLE9BQU8sQ0FBQ2EsV0FBUixDQUFvQkwsSUFBcEIsSUFBNEJDLENBQTVCO0FBQ0EsZUFBTyxLQUFQO0FBQ0EsT0FQRCxDQVFBLE9BQU9LLENBQVAsRUFDQSxDQUVDOztBQUVELFVBQUlMLENBQUMsR0FBRyxNQUFNLDBCQUFZRCxJQUFaLEVBQWtCVCxJQUFJLENBQUNhLEdBQXZCLENBQWQsRUFDQTtBQUNDWixRQUFBQSxPQUFPLENBQUNhLFdBQVIsQ0FBb0JMLElBQXBCLElBQTRCQyxDQUE1QjtBQUNBLGVBQU8sS0FBUDtBQUNBOztBQUVELGFBQU8sSUFBUDtBQUNBLEtBekJXLENBQWI7QUEyQkE7O0FBRUQsTUFBSVIsSUFBSSxDQUFDYyxNQUFULEVBQ0E7QUFDQyxRQUFJaEIsSUFBSSxDQUFDaUIsU0FBVCxFQUNBO0FBQ0NmLE1BQUFBLElBQUksQ0FBQ2dCLE9BQUwsQ0FBYVQsSUFBSSxJQUFJUixPQUFPLENBQUNhLFdBQVIsQ0FBb0JMLElBQXBCLElBQTRCVSxTQUFqRDtBQUNBLEtBSEQsTUFLQTtBQUNDLFlBQU0sOEJBQWdCLE1BQWhCLEVBQXdCLENBQzdCLEtBRDZCLEVBRTdCLEdBQUdqQixJQUYwQixFQUc1QkYsSUFBSSxDQUFDb0IsS0FBTCxHQUFhLFNBQWIsR0FBeUIsSUFIRyxFQUk1QnBCLElBQUksQ0FBQ3FCLGFBQUwsR0FBcUIsa0JBQXJCLEdBQTBDLElBSmQsRUFLN0IsbUJBTDZCLEVBTTdCLHlCQU42QixFQU83QixtQkFQNkIsRUFRNUJyQixJQUFJLENBQUNzQixVQUFMLEdBQWtCLGNBQWxCLEdBQW1DLElBUlAsRUFTNUJ0QixJQUFJLENBQUNzQixVQUFMLEdBQWtCdEIsSUFBSSxDQUFDc0IsVUFBdkIsR0FBb0MsSUFUUixFQVU1QmQsTUFWNEIsQ0FVckJlLENBQUMsSUFBSUEsQ0FBQyxJQUFJLElBVlcsQ0FBeEIsRUFVb0I7QUFDekJDLFFBQUFBLFNBQVMsRUFBRSxJQURjO0FBRXpCWCxRQUFBQSxHQUFHLEVBQUVaLE9BQU8sQ0FBQ3dCLE1BRlk7QUFHekJDLFFBQUFBLEtBQUssRUFBRTFCLElBQUksQ0FBQ29CLEtBQUwsR0FBYUQsU0FBYixHQUF5QjtBQUhQLE9BVnBCLENBQU47QUFlQTtBQUNEO0FBQ0Q7O2VBRWNwQixtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElUU1JlcXVpcmVkV2l0aCB9IGZyb20gJ3RzLXR5cGUnO1xuaW1wb3J0IHsgSVlQWEFyZ3VtZW50cywgSVJ1bnRpbWVDYWNoZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGNyb3NzU3Bhd25FeHRyYSBmcm9tICdjcm9zcy1zcGF3bi1leHRyYSc7XG5pbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGZpbmRDb21tYW5kIGZyb20gJy4vZmluZENvbW1hbmQnO1xuaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5zdGFsbERlcGVuZGVuY2llcyhhcmd2OiBJWVBYQXJndW1lbnRzLCBydW50aW1lOiBJUnVudGltZUNhY2hlKVxue1xuXHRsZXQgcGtncyA9IGFyZ3YucGFja2FnZS5zbGljZSgpO1xuXG5cdGlmIChhcmd2Lmlnbm9yZUV4aXN0aW5nKVxuXHR7XG5cblx0fVxuXHRlbHNlXG5cdHtcblx0XHRwa2dzID0gYXdhaXQgQmx1ZWJpcmQucmVzb2x2ZShwa2dzKVxuXHRcdFx0LmZpbHRlcihhc3luYyAobmFtZSkgPT4ge1xuXG5cdFx0XHRcdGxldCByOiBzdHJpbmc7XG5cblx0XHRcdFx0dHJ5XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyID0gcmVxdWlyZS5yZXNvbHZlKG5hbWUgKyAnL3BhY2thZ2UuanNvbicsIHtcblx0XHRcdFx0XHRcdHBhdGhzOiBbYXJndi5jd2RdXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cnVudGltZS5za2lwSW5zdGFsbFtuYW1lXSA9IHI7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNhdGNoIChlKVxuXHRcdFx0XHR7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChyID0gYXdhaXQgZmluZENvbW1hbmQobmFtZSwgYXJndi5jd2QpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cnVudGltZS5za2lwSW5zdGFsbFtuYW1lXSA9IHI7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9KVxuXHRcdDtcblx0fVxuXG5cdGlmIChwa2dzLmxlbmd0aClcblx0e1xuXHRcdGlmIChhcmd2Lm5vSW5zdGFsbClcblx0XHR7XG5cdFx0XHRwa2dzLmZvckVhY2gobmFtZSA9PiBydW50aW1lLnNraXBJbnN0YWxsW25hbWVdID0gdW5kZWZpbmVkKVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0YXdhaXQgY3Jvc3NTcGF3bkV4dHJhKCd5YXJuJywgW1xuXHRcdFx0XHQnYWRkJyxcblx0XHRcdFx0Li4ucGtncyxcblx0XHRcdFx0KGFyZ3YucXVpZXQgPyAnLS1xdWlldCcgOiBudWxsKSxcblx0XHRcdFx0KGFyZ3YucHJlZmVyT2ZmbGluZSA/ICctLXByZWZlci1vZmZsaW5lJyA6IG51bGwpLFxuXHRcdFx0XHQnLS1saW5rLWR1cGxpY2F0ZXMnLFxuXHRcdFx0XHQnLS1uby1ub2RlLXZlcnNpb24tY2hlY2snLFxuXHRcdFx0XHQnLS1pZ25vcmUtb3B0aW9uYWwnLFxuXHRcdFx0XHQoYXJndi51c2VyY29uZmlnID8gJy0tdXNlLXlhcm5yYycgOiBudWxsKSxcblx0XHRcdFx0KGFyZ3YudXNlcmNvbmZpZyA/IGFyZ3YudXNlcmNvbmZpZyA6IG51bGwpLFxuXHRcdFx0XS5maWx0ZXIodiA9PiB2ICE9IG51bGwpLCB7XG5cdFx0XHRcdHN0cmlwQW5zaTogdHJ1ZSxcblx0XHRcdFx0Y3dkOiBydW50aW1lLnRtcERpcixcblx0XHRcdFx0c3RkaW86IGFyZ3YucXVpZXQgPyB1bmRlZmluZWQgOiAnaW5oZXJpdCcsXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5zdGFsbERlcGVuZGVuY2llc1xuIl19