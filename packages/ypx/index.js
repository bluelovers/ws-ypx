Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YPX = YPX;
exports.default = void 0;

var _crossSpawnExtra = _interopRequireDefault(require("cross-spawn-extra"));

var _createTemporaryDirectory = _interopRequireDefault(require("./lib/createTemporaryDirectory"));

var _fsExtra = require("fs-extra");

var _logger = _interopRequireDefault(require("debug-color2/logger"));

var _findCommand = _interopRequireDefault(require("./lib/findCommand"));

var _initTemporaryPackage = _interopRequireDefault(require("./lib/initTemporaryPackage"));

var _handleOptions = _interopRequireDefault(require("./lib/handleOptions"));

var _handleEnv = _interopRequireDefault(require("./lib/handleEnv"));

var _installDependencies = _interopRequireDefault(require("./lib/installDependencies"));

var _util = require("util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function YPX(_argv, inputArgv) {
  var _argv$package, _argv$_$;

  let argv = _argv;

  if (!((_argv$package = argv.package) === null || _argv$package === void 0 ? void 0 : _argv$package.length)) {
    throw new Error(`package name is need`);
  }

  argv = await (0, _handleOptions.default)(argv);
  let label = 'ypx';

  _logger.default.time(label);

  if (argv._.length > 1) {
    throw new Error(`command not invalid, ${argv._}`);
  }

  _logger.default.time(`installed`);

  let runtime = {
    tmpDir: await (0, _createTemporaryDirectory.default)(),
    created: false,
    skipInstall: {}
  };
  await (0, _initTemporaryPackage.default)(runtime.tmpDir).tapCatch(e => {
    _logger.default.error(`failed create temp package, ${runtime.tmpDir}`);
  });
  await (0, _installDependencies.default)(argv, runtime);

  if (Object.keys(runtime.skipInstall).length) {
    _logger.default.info(`skip install`, (0, _util.inspect)(runtime.skipInstall));
  }

  _logger.default.timeEnd(`installed`);

  let command = (_argv$_$ = argv._[0]) !== null && _argv$_$ !== void 0 ? _argv$_$ : argv.package[argv.package.length - 1];

  if (command in runtime.skipInstall) {
    await (0, _findCommand.default)(command, runtime.tmpDir).then(bin => {
      if (bin) {
        command = bin;
      }
    }).catch(err => null);
  }

  let env = runtime.env = await (0, _handleEnv.default)(argv, runtime);

  _logger.default.time(`exec`);

  _logger.default.debug(`[CWD]`, argv.cwd);

  _logger.default.debug(`[EXEC]`, command, argv['--']);

  await (0, _crossSpawnExtra.default)(command, argv['--'], {
    stdio: 'inherit',
    env,
    cwd: argv.cwd
  });

  _logger.default.timeEnd(`exec`);

  _logger.default.time(`remove temp package`);

  await (0, _fsExtra.remove)(runtime.tmpDir);

  _logger.default.timeEnd(`remove temp package`);

  _logger.default.timeEnd(label);
}

var _default = YPX;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIllQWCIsIl9hcmd2IiwiaW5wdXRBcmd2IiwiYXJndiIsInBhY2thZ2UiLCJsZW5ndGgiLCJFcnJvciIsImxhYmVsIiwiY29uc29sZSIsInRpbWUiLCJfIiwicnVudGltZSIsInRtcERpciIsImNyZWF0ZWQiLCJza2lwSW5zdGFsbCIsInRhcENhdGNoIiwiZSIsImVycm9yIiwiT2JqZWN0Iiwia2V5cyIsImluZm8iLCJ0aW1lRW5kIiwiY29tbWFuZCIsInRoZW4iLCJiaW4iLCJjYXRjaCIsImVyciIsImVudiIsImRlYnVnIiwiY3dkIiwic3RkaW8iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sZUFBZUEsR0FBZixDQUFtQkMsS0FBbkIsRUFBOENDLFNBQTlDLEVBQ1A7QUFBQTs7QUFDQyxNQUFJQyxJQUFJLEdBQUdGLEtBQVg7O0FBRUEsTUFBSSxtQkFBQ0UsSUFBSSxDQUFDQyxPQUFOLGtEQUFDLGNBQWNDLE1BQWYsQ0FBSixFQUNBO0FBQ0MsVUFBTSxJQUFJQyxLQUFKLENBQVcsc0JBQVgsQ0FBTjtBQUNBOztBQUVESCxFQUFBQSxJQUFJLEdBQUcsTUFBTSw0QkFBY0EsSUFBZCxDQUFiO0FBRUEsTUFBSUksS0FBSyxHQUFHLEtBQVo7O0FBRUFDLGtCQUFRQyxJQUFSLENBQWFGLEtBQWI7O0FBRUEsTUFBSUosSUFBSSxDQUFDTyxDQUFMLENBQU9MLE1BQVAsR0FBZ0IsQ0FBcEIsRUFDQTtBQUNDLFVBQU0sSUFBSUMsS0FBSixDQUFXLHdCQUF1QkgsSUFBSSxDQUFDTyxDQUFFLEVBQXpDLENBQU47QUFDQTs7QUFFREYsa0JBQVFDLElBQVIsQ0FBYyxXQUFkOztBQUVBLE1BQUlFLE9BQXNCLEdBQUc7QUFDNUJDLElBQUFBLE1BQU0sRUFBRSxNQUFNLHdDQURjO0FBRTVCQyxJQUFBQSxPQUFPLEVBQUUsS0FGbUI7QUFHNUJDLElBQUFBLFdBQVcsRUFBRTtBQUhlLEdBQTdCO0FBTUEsUUFBTSxtQ0FBcUJILE9BQU8sQ0FBQ0MsTUFBN0IsRUFDSkcsUUFESSxDQUNLQyxDQUFDLElBQ1g7QUFDQ1Isb0JBQVFTLEtBQVIsQ0FBZSwrQkFBOEJOLE9BQU8sQ0FBQ0MsTUFBTyxFQUE1RDtBQUNBLEdBSkksQ0FBTjtBQVNBLFFBQU0sa0NBQW9CVCxJQUFwQixFQUEwQlEsT0FBMUIsQ0FBTjs7QUFFQSxNQUFJTyxNQUFNLENBQUNDLElBQVAsQ0FBWVIsT0FBTyxDQUFDRyxXQUFwQixFQUFpQ1QsTUFBckMsRUFDQTtBQUNDRyxvQkFBUVksSUFBUixDQUFjLGNBQWQsRUFBNkIsbUJBQVFULE9BQU8sQ0FBQ0csV0FBaEIsQ0FBN0I7QUFDQTs7QUFFRE4sa0JBQVFhLE9BQVIsQ0FBaUIsV0FBakI7O0FBRUEsTUFBSUMsT0FBTyxlQUFHbkIsSUFBSSxDQUFDTyxDQUFMLENBQU8sQ0FBUCxDQUFILCtDQUFnQlAsSUFBSSxDQUFDQyxPQUFMLENBQWFELElBQUksQ0FBQ0MsT0FBTCxDQUFhQyxNQUFiLEdBQXNCLENBQW5DLENBQTNCOztBQUVBLE1BQUlpQixPQUFPLElBQUlYLE9BQU8sQ0FBQ0csV0FBdkIsRUFDQTtBQUNDLFVBQU0sMEJBQVlRLE9BQVosRUFBcUJYLE9BQU8sQ0FBQ0MsTUFBN0IsRUFDSlcsSUFESSxDQUNDQyxHQUFHLElBQUk7QUFFWixVQUFJQSxHQUFKLEVBQ0E7QUFDQ0YsUUFBQUEsT0FBTyxHQUFHRSxHQUFWO0FBQ0E7QUFDRCxLQVBJLEVBUUpDLEtBUkksQ0FRRUMsR0FBRyxJQUFJLElBUlQsQ0FBTjtBQVVBOztBQUVELE1BQUlDLEdBQUcsR0FBR2hCLE9BQU8sQ0FBQ2dCLEdBQVIsR0FBYyxNQUFNLHdCQUFVeEIsSUFBVixFQUFnQlEsT0FBaEIsQ0FBOUI7O0FBRUFILGtCQUFRQyxJQUFSLENBQWMsTUFBZDs7QUFFQUQsa0JBQVFvQixLQUFSLENBQWUsT0FBZixFQUF1QnpCLElBQUksQ0FBQzBCLEdBQTVCOztBQUNBckIsa0JBQVFvQixLQUFSLENBQWUsUUFBZixFQUF3Qk4sT0FBeEIsRUFBaUNuQixJQUFJLENBQUMsSUFBRCxDQUFyQzs7QUFDQSxRQUFNLDhCQUFnQm1CLE9BQWhCLEVBQXlCbkIsSUFBSSxDQUFDLElBQUQsQ0FBN0IsRUFBcUM7QUFDMUMyQixJQUFBQSxLQUFLLEVBQUUsU0FEbUM7QUFFMUNILElBQUFBLEdBRjBDO0FBRzFDRSxJQUFBQSxHQUFHLEVBQUUxQixJQUFJLENBQUMwQjtBQUhnQyxHQUFyQyxDQUFOOztBQU1BckIsa0JBQVFhLE9BQVIsQ0FBaUIsTUFBakI7O0FBRUFiLGtCQUFRQyxJQUFSLENBQWMscUJBQWQ7O0FBQ0EsUUFBTSxxQkFBT0UsT0FBTyxDQUFDQyxNQUFmLENBQU47O0FBQ0FKLGtCQUFRYSxPQUFSLENBQWlCLHFCQUFqQjs7QUFFQWIsa0JBQVFhLE9BQVIsQ0FBZ0JkLEtBQWhCO0FBQ0E7O2VBRWNQLEciLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDIwLzEvMjguXG4gKi9cblxuaW1wb3J0IGNyb3NzU3Bhd25FeHRyYSBmcm9tICdjcm9zcy1zcGF3bi1leHRyYSc7XG5pbXBvcnQgY3JlYXRlVGVtcG9yYXJ5RGlyZWN0b3J5IGZyb20gJy4vbGliL2NyZWF0ZVRlbXBvcmFyeURpcmVjdG9yeSc7XG5pbXBvcnQgeyByZW1vdmUgfSBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgY29uc29sZSBmcm9tICdkZWJ1Zy1jb2xvcjIvbG9nZ2VyJ1xuaW1wb3J0IGZpbmRDb21tYW5kIGZyb20gJy4vbGliL2ZpbmRDb21tYW5kJztcbmltcG9ydCB7IHBhdGhFbnYgfSBmcm9tICdwYXRoLWVudidcbmltcG9ydCBpbml0VGVtcG9yYXJ5UGFja2FnZSBmcm9tICcuL2xpYi9pbml0VGVtcG9yYXJ5UGFja2FnZSc7XG5pbXBvcnQgeyBJWVBYQXJndW1lbnRzSW5wdXQsIElSdW50aW1lQ2FjaGUsIElZUFhBcmd1bWVudHMgfSBmcm9tICcuL2xpYi90eXBlcyc7XG5pbXBvcnQgaGFuZGxlT3B0aW9ucyBmcm9tICcuL2xpYi9oYW5kbGVPcHRpb25zJztcbmltcG9ydCBoYW5kbGVFbnYgZnJvbSAnLi9saWIvaGFuZGxlRW52JztcbmltcG9ydCBpbnN0YWxsRGVwZW5kZW5jaWVzIGZyb20gJy4vbGliL2luc3RhbGxEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJ3V0aWwnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gWVBYKF9hcmd2OiBJWVBYQXJndW1lbnRzSW5wdXQsIGlucHV0QXJndj86IHN0cmluZ1tdKVxue1xuXHRsZXQgYXJndiA9IF9hcmd2IGFzIFJlcXVpcmVkPElZUFhBcmd1bWVudHM+O1xuXG5cdGlmICghYXJndi5wYWNrYWdlPy5sZW5ndGgpXG5cdHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYHBhY2thZ2UgbmFtZSBpcyBuZWVkYClcblx0fVxuXG5cdGFyZ3YgPSBhd2FpdCBoYW5kbGVPcHRpb25zKGFyZ3YpO1xuXG5cdGxldCBsYWJlbCA9ICd5cHgnO1xuXG5cdGNvbnNvbGUudGltZShsYWJlbCk7XG5cblx0aWYgKGFyZ3YuXy5sZW5ndGggPiAxKVxuXHR7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBjb21tYW5kIG5vdCBpbnZhbGlkLCAke2FyZ3YuX31gKVxuXHR9XG5cblx0Y29uc29sZS50aW1lKGBpbnN0YWxsZWRgKTtcblxuXHRsZXQgcnVudGltZTogSVJ1bnRpbWVDYWNoZSA9IHtcblx0XHR0bXBEaXI6IGF3YWl0IGNyZWF0ZVRlbXBvcmFyeURpcmVjdG9yeSgpLFxuXHRcdGNyZWF0ZWQ6IGZhbHNlLFxuXHRcdHNraXBJbnN0YWxsOiB7fSxcblx0fTtcblxuXHRhd2FpdCBpbml0VGVtcG9yYXJ5UGFja2FnZShydW50aW1lLnRtcERpcilcblx0XHQudGFwQ2F0Y2goZSA9PlxuXHRcdHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYGZhaWxlZCBjcmVhdGUgdGVtcCBwYWNrYWdlLCAke3J1bnRpbWUudG1wRGlyfWApXG5cdFx0fSlcblx0O1xuXG5cdC8vY29uc29sZS5kaXIoYXJndik7XG5cblx0YXdhaXQgaW5zdGFsbERlcGVuZGVuY2llcyhhcmd2LCBydW50aW1lKTtcblxuXHRpZiAoT2JqZWN0LmtleXMocnVudGltZS5za2lwSW5zdGFsbCkubGVuZ3RoKVxuXHR7XG5cdFx0Y29uc29sZS5pbmZvKGBza2lwIGluc3RhbGxgLCBpbnNwZWN0KHJ1bnRpbWUuc2tpcEluc3RhbGwpKVxuXHR9XG5cblx0Y29uc29sZS50aW1lRW5kKGBpbnN0YWxsZWRgKTtcblxuXHRsZXQgY29tbWFuZCA9IGFyZ3YuX1swXSA/PyBhcmd2LnBhY2thZ2VbYXJndi5wYWNrYWdlLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChjb21tYW5kIGluIHJ1bnRpbWUuc2tpcEluc3RhbGwpXG5cdHtcblx0XHRhd2FpdCBmaW5kQ29tbWFuZChjb21tYW5kLCBydW50aW1lLnRtcERpcilcblx0XHRcdC50aGVuKGJpbiA9PiB7XG5cdFx0XHRcdC8vY29uc29sZS5kZWJ1Zyhjb21tYW5kLCBgPT5gLCBiaW4pO1xuXHRcdFx0XHRpZiAoYmluKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y29tbWFuZCA9IGJpbjtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChlcnIgPT4gbnVsbClcblx0XHQ7XG5cdH1cblxuXHRsZXQgZW52ID0gcnVudGltZS5lbnYgPSBhd2FpdCBoYW5kbGVFbnYoYXJndiwgcnVudGltZSk7XG5cblx0Y29uc29sZS50aW1lKGBleGVjYCk7XG5cblx0Y29uc29sZS5kZWJ1ZyhgW0NXRF1gLCBhcmd2LmN3ZCk7XG5cdGNvbnNvbGUuZGVidWcoYFtFWEVDXWAsIGNvbW1hbmQsIGFyZ3ZbJy0tJ10pO1xuXHRhd2FpdCBjcm9zc1NwYXduRXh0cmEoY29tbWFuZCwgYXJndlsnLS0nXSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0ZW52LFxuXHRcdGN3ZDogYXJndi5jd2QsXG5cdH0pO1xuXG5cdGNvbnNvbGUudGltZUVuZChgZXhlY2ApO1xuXG5cdGNvbnNvbGUudGltZShgcmVtb3ZlIHRlbXAgcGFja2FnZWApO1xuXHRhd2FpdCByZW1vdmUocnVudGltZS50bXBEaXIpO1xuXHRjb25zb2xlLnRpbWVFbmQoYHJlbW92ZSB0ZW1wIHBhY2thZ2VgKTtcblxuXHRjb25zb2xlLnRpbWVFbmQobGFiZWwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBZUFg7XG4iXX0=
