Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YPX = YPX;
exports.default = void 0;

var _crossSpawnExtra = _interopRequireDefault(require("cross-spawn-extra"));

var _createTemporaryDirectory = _interopRequireDefault(require("./lib/createTemporaryDirectory"));

var _fsExtra = require("fs-extra");

var _logger = _interopRequireDefault(require("debug-color2/logger"));

var _findCommand = _interopRequireDefault(require("./lib/findCommand"));

var _initTemporaryPackage = _interopRequireDefault(require("./lib/initTemporaryPackage"));

var _handleOptions = _interopRequireDefault(require("./lib/handleOptions"));

var _handleEnv = _interopRequireDefault(require("./lib/handleEnv"));

var _installDependencies = _interopRequireDefault(require("./lib/installDependencies"));

var _util = require("util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function YPX(_argv, inputArgv) {
  var _argv$package, _argv$_$;

  let argv = _argv;

  if (!((_argv$package = argv.package) === null || _argv$package === void 0 ? void 0 : _argv$package.length)) {
    throw new Error(`package name is need`);
  }

  argv = await (0, _handleOptions.default)(argv);
  let label = 'ypx';

  _logger.default.time(label);

  if (argv._.length > 1) {
    throw new Error(`command not invalid, ${argv._}`);
  }

  _logger.default.time(`installed`);

  let runtime = {
    tmpDir: await (0, _createTemporaryDirectory.default)(),
    created: false,
    skipInstall: {}
  };
  await (0, _initTemporaryPackage.default)(runtime.tmpDir).tapCatch(e => {
    _logger.default.error(`failed create temp package, ${runtime.tmpDir}`);
  });
  await (0, _installDependencies.default)(argv, runtime);

  if (Object.keys(runtime.skipInstall).length) {
    _logger.default.info(`skip install`, (0, _util.inspect)(runtime.skipInstall), `or maybe u wanna use --ignore-existing`);
  }

  _logger.default.timeEnd(`installed`);

  let command = (_argv$_$ = argv._[0]) !== null && _argv$_$ !== void 0 ? _argv$_$ : argv.package[argv.package.length - 1];

  if (command in runtime.skipInstall) {
    await (0, _findCommand.default)(command, runtime.tmpDir).then(bin => {
      if (bin) {
        command = bin;
      }
    }).catch(err => null);
  }

  let env = runtime.env = await (0, _handleEnv.default)(argv, runtime);

  _logger.default.time(`exec`);

  _logger.default.debug(`[CWD]`, argv.cwd);

  _logger.default.debug(`[EXEC]`, command, argv['--']);

  await (0, _crossSpawnExtra.default)(command, argv['--'], {
    stdio: 'inherit',
    env,
    cwd: argv.cwd
  });

  _logger.default.timeEnd(`exec`);

  _logger.default.time(`remove temp package`);

  await (0, _fsExtra.remove)(runtime.tmpDir);

  _logger.default.timeEnd(`remove temp package`);

  _logger.default.timeEnd(label);
}

var _default = YPX;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIllQWCIsIl9hcmd2IiwiaW5wdXRBcmd2IiwiYXJndiIsInBhY2thZ2UiLCJsZW5ndGgiLCJFcnJvciIsImxhYmVsIiwiY29uc29sZSIsInRpbWUiLCJfIiwicnVudGltZSIsInRtcERpciIsImNyZWF0ZWQiLCJza2lwSW5zdGFsbCIsInRhcENhdGNoIiwiZSIsImVycm9yIiwiT2JqZWN0Iiwia2V5cyIsImluZm8iLCJ0aW1lRW5kIiwiY29tbWFuZCIsInRoZW4iLCJiaW4iLCJjYXRjaCIsImVyciIsImVudiIsImRlYnVnIiwiY3dkIiwic3RkaW8iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sZUFBZUEsR0FBZixDQUFtQkMsS0FBbkIsRUFBOENDLFNBQTlDLEVBQ1A7QUFBQTs7QUFDQyxNQUFJQyxJQUFJLEdBQUdGLEtBQVg7O0FBRUEsTUFBSSxtQkFBQ0UsSUFBSSxDQUFDQyxPQUFOLGtEQUFDLGNBQWNDLE1BQWYsQ0FBSixFQUNBO0FBQ0MsVUFBTSxJQUFJQyxLQUFKLENBQVcsc0JBQVgsQ0FBTjtBQUNBOztBQUVESCxFQUFBQSxJQUFJLEdBQUcsTUFBTSw0QkFBY0EsSUFBZCxDQUFiO0FBRUEsTUFBSUksS0FBSyxHQUFHLEtBQVo7O0FBRUFDLGtCQUFRQyxJQUFSLENBQWFGLEtBQWI7O0FBRUEsTUFBSUosSUFBSSxDQUFDTyxDQUFMLENBQU9MLE1BQVAsR0FBZ0IsQ0FBcEIsRUFDQTtBQUNDLFVBQU0sSUFBSUMsS0FBSixDQUFXLHdCQUF1QkgsSUFBSSxDQUFDTyxDQUFFLEVBQXpDLENBQU47QUFDQTs7QUFFREYsa0JBQVFDLElBQVIsQ0FBYyxXQUFkOztBQUVBLE1BQUlFLE9BQXNCLEdBQUc7QUFDNUJDLElBQUFBLE1BQU0sRUFBRSxNQUFNLHdDQURjO0FBRTVCQyxJQUFBQSxPQUFPLEVBQUUsS0FGbUI7QUFHNUJDLElBQUFBLFdBQVcsRUFBRTtBQUhlLEdBQTdCO0FBTUEsUUFBTSxtQ0FBcUJILE9BQU8sQ0FBQ0MsTUFBN0IsRUFDSkcsUUFESSxDQUNLQyxDQUFDLElBQ1g7QUFDQ1Isb0JBQVFTLEtBQVIsQ0FBZSwrQkFBOEJOLE9BQU8sQ0FBQ0MsTUFBTyxFQUE1RDtBQUNBLEdBSkksQ0FBTjtBQVNBLFFBQU0sa0NBQW9CVCxJQUFwQixFQUEwQlEsT0FBMUIsQ0FBTjs7QUFFQSxNQUFJTyxNQUFNLENBQUNDLElBQVAsQ0FBWVIsT0FBTyxDQUFDRyxXQUFwQixFQUFpQ1QsTUFBckMsRUFDQTtBQUNDRyxvQkFBUVksSUFBUixDQUFjLGNBQWQsRUFBNkIsbUJBQVFULE9BQU8sQ0FBQ0csV0FBaEIsQ0FBN0IsRUFBNEQsd0NBQTVEO0FBQ0E7O0FBRUROLGtCQUFRYSxPQUFSLENBQWlCLFdBQWpCOztBQUVBLE1BQUlDLE9BQU8sZUFBR25CLElBQUksQ0FBQ08sQ0FBTCxDQUFPLENBQVAsQ0FBSCwrQ0FBZ0JQLElBQUksQ0FBQ0MsT0FBTCxDQUFhRCxJQUFJLENBQUNDLE9BQUwsQ0FBYUMsTUFBYixHQUFzQixDQUFuQyxDQUEzQjs7QUFFQSxNQUFJaUIsT0FBTyxJQUFJWCxPQUFPLENBQUNHLFdBQXZCLEVBQ0E7QUFDQyxVQUFNLDBCQUFZUSxPQUFaLEVBQXFCWCxPQUFPLENBQUNDLE1BQTdCLEVBQ0pXLElBREksQ0FDQ0MsR0FBRyxJQUFJO0FBRVosVUFBSUEsR0FBSixFQUNBO0FBQ0NGLFFBQUFBLE9BQU8sR0FBR0UsR0FBVjtBQUNBO0FBQ0QsS0FQSSxFQVFKQyxLQVJJLENBUUVDLEdBQUcsSUFBSSxJQVJULENBQU47QUFVQTs7QUFFRCxNQUFJQyxHQUFHLEdBQUdoQixPQUFPLENBQUNnQixHQUFSLEdBQWMsTUFBTSx3QkFBVXhCLElBQVYsRUFBZ0JRLE9BQWhCLENBQTlCOztBQUVBSCxrQkFBUUMsSUFBUixDQUFjLE1BQWQ7O0FBRUFELGtCQUFRb0IsS0FBUixDQUFlLE9BQWYsRUFBdUJ6QixJQUFJLENBQUMwQixHQUE1Qjs7QUFDQXJCLGtCQUFRb0IsS0FBUixDQUFlLFFBQWYsRUFBd0JOLE9BQXhCLEVBQWlDbkIsSUFBSSxDQUFDLElBQUQsQ0FBckM7O0FBQ0EsUUFBTSw4QkFBZ0JtQixPQUFoQixFQUF5Qm5CLElBQUksQ0FBQyxJQUFELENBQTdCLEVBQXFDO0FBQzFDMkIsSUFBQUEsS0FBSyxFQUFFLFNBRG1DO0FBRTFDSCxJQUFBQSxHQUYwQztBQUcxQ0UsSUFBQUEsR0FBRyxFQUFFMUIsSUFBSSxDQUFDMEI7QUFIZ0MsR0FBckMsQ0FBTjs7QUFNQXJCLGtCQUFRYSxPQUFSLENBQWlCLE1BQWpCOztBQUVBYixrQkFBUUMsSUFBUixDQUFjLHFCQUFkOztBQUNBLFFBQU0scUJBQU9FLE9BQU8sQ0FBQ0MsTUFBZixDQUFOOztBQUNBSixrQkFBUWEsT0FBUixDQUFpQixxQkFBakI7O0FBRUFiLGtCQUFRYSxPQUFSLENBQWdCZCxLQUFoQjtBQUNBOztlQUVjUCxHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAyMC8xLzI4LlxuICovXG5cbmltcG9ydCBjcm9zc1NwYXduRXh0cmEgZnJvbSAnY3Jvc3Mtc3Bhd24tZXh0cmEnO1xuaW1wb3J0IGNyZWF0ZVRlbXBvcmFyeURpcmVjdG9yeSBmcm9tICcuL2xpYi9jcmVhdGVUZW1wb3JhcnlEaXJlY3RvcnknO1xuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IGNvbnNvbGUgZnJvbSAnZGVidWctY29sb3IyL2xvZ2dlcidcbmltcG9ydCBmaW5kQ29tbWFuZCBmcm9tICcuL2xpYi9maW5kQ29tbWFuZCc7XG5pbXBvcnQgeyBwYXRoRW52IH0gZnJvbSAncGF0aC1lbnYnXG5pbXBvcnQgaW5pdFRlbXBvcmFyeVBhY2thZ2UgZnJvbSAnLi9saWIvaW5pdFRlbXBvcmFyeVBhY2thZ2UnO1xuaW1wb3J0IHsgSVlQWEFyZ3VtZW50c0lucHV0LCBJUnVudGltZUNhY2hlLCBJWVBYQXJndW1lbnRzIH0gZnJvbSAnLi9saWIvdHlwZXMnO1xuaW1wb3J0IGhhbmRsZU9wdGlvbnMgZnJvbSAnLi9saWIvaGFuZGxlT3B0aW9ucyc7XG5pbXBvcnQgaGFuZGxlRW52IGZyb20gJy4vbGliL2hhbmRsZUVudic7XG5pbXBvcnQgaW5zdGFsbERlcGVuZGVuY2llcyBmcm9tICcuL2xpYi9pbnN0YWxsRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICd1dGlsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFlQWChfYXJndjogSVlQWEFyZ3VtZW50c0lucHV0LCBpbnB1dEFyZ3Y/OiBzdHJpbmdbXSlcbntcblx0bGV0IGFyZ3YgPSBfYXJndiBhcyBSZXF1aXJlZDxJWVBYQXJndW1lbnRzPjtcblxuXHRpZiAoIWFyZ3YucGFja2FnZT8ubGVuZ3RoKVxuXHR7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBwYWNrYWdlIG5hbWUgaXMgbmVlZGApXG5cdH1cblxuXHRhcmd2ID0gYXdhaXQgaGFuZGxlT3B0aW9ucyhhcmd2KTtcblxuXHRsZXQgbGFiZWwgPSAneXB4JztcblxuXHRjb25zb2xlLnRpbWUobGFiZWwpO1xuXG5cdGlmIChhcmd2Ll8ubGVuZ3RoID4gMSlcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvcihgY29tbWFuZCBub3QgaW52YWxpZCwgJHthcmd2Ll99YClcblx0fVxuXG5cdGNvbnNvbGUudGltZShgaW5zdGFsbGVkYCk7XG5cblx0bGV0IHJ1bnRpbWU6IElSdW50aW1lQ2FjaGUgPSB7XG5cdFx0dG1wRGlyOiBhd2FpdCBjcmVhdGVUZW1wb3JhcnlEaXJlY3RvcnkoKSxcblx0XHRjcmVhdGVkOiBmYWxzZSxcblx0XHRza2lwSW5zdGFsbDoge30sXG5cdH07XG5cblx0YXdhaXQgaW5pdFRlbXBvcmFyeVBhY2thZ2UocnVudGltZS50bXBEaXIpXG5cdFx0LnRhcENhdGNoKGUgPT5cblx0XHR7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBmYWlsZWQgY3JlYXRlIHRlbXAgcGFja2FnZSwgJHtydW50aW1lLnRtcERpcn1gKVxuXHRcdH0pXG5cdDtcblxuXHQvL2NvbnNvbGUuZGlyKGFyZ3YpO1xuXG5cdGF3YWl0IGluc3RhbGxEZXBlbmRlbmNpZXMoYXJndiwgcnVudGltZSk7XG5cblx0aWYgKE9iamVjdC5rZXlzKHJ1bnRpbWUuc2tpcEluc3RhbGwpLmxlbmd0aClcblx0e1xuXHRcdGNvbnNvbGUuaW5mbyhgc2tpcCBpbnN0YWxsYCwgaW5zcGVjdChydW50aW1lLnNraXBJbnN0YWxsKSwgYG9yIG1heWJlIHUgd2FubmEgdXNlIC0taWdub3JlLWV4aXN0aW5nYClcblx0fVxuXG5cdGNvbnNvbGUudGltZUVuZChgaW5zdGFsbGVkYCk7XG5cblx0bGV0IGNvbW1hbmQgPSBhcmd2Ll9bMF0gPz8gYXJndi5wYWNrYWdlW2FyZ3YucGFja2FnZS5sZW5ndGggLSAxXTtcblxuXHRpZiAoY29tbWFuZCBpbiBydW50aW1lLnNraXBJbnN0YWxsKVxuXHR7XG5cdFx0YXdhaXQgZmluZENvbW1hbmQoY29tbWFuZCwgcnVudGltZS50bXBEaXIpXG5cdFx0XHQudGhlbihiaW4gPT4ge1xuXHRcdFx0XHQvL2NvbnNvbGUuZGVidWcoY29tbWFuZCwgYD0+YCwgYmluKTtcblx0XHRcdFx0aWYgKGJpbilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGNvbW1hbmQgPSBiaW47XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZXJyID0+IG51bGwpXG5cdFx0O1xuXHR9XG5cblx0bGV0IGVudiA9IHJ1bnRpbWUuZW52ID0gYXdhaXQgaGFuZGxlRW52KGFyZ3YsIHJ1bnRpbWUpO1xuXG5cdGNvbnNvbGUudGltZShgZXhlY2ApO1xuXG5cdGNvbnNvbGUuZGVidWcoYFtDV0RdYCwgYXJndi5jd2QpO1xuXHRjb25zb2xlLmRlYnVnKGBbRVhFQ11gLCBjb21tYW5kLCBhcmd2WyctLSddKTtcblx0YXdhaXQgY3Jvc3NTcGF3bkV4dHJhKGNvbW1hbmQsIGFyZ3ZbJy0tJ10sIHtcblx0XHRzdGRpbzogJ2luaGVyaXQnLFxuXHRcdGVudixcblx0XHRjd2Q6IGFyZ3YuY3dkLFxuXHR9KTtcblxuXHRjb25zb2xlLnRpbWVFbmQoYGV4ZWNgKTtcblxuXHRjb25zb2xlLnRpbWUoYHJlbW92ZSB0ZW1wIHBhY2thZ2VgKTtcblx0YXdhaXQgcmVtb3ZlKHJ1bnRpbWUudG1wRGlyKTtcblx0Y29uc29sZS50aW1lRW5kKGByZW1vdmUgdGVtcCBwYWNrYWdlYCk7XG5cblx0Y29uc29sZS50aW1lRW5kKGxhYmVsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgWVBYO1xuIl19
