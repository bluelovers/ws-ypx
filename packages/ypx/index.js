Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YPX = YPX;
exports.default = void 0;

var _crossSpawnExtra = _interopRequireDefault(require("cross-spawn-extra"));

var _createTemporaryDirectory = _interopRequireDefault(require("./lib/createTemporaryDirectory"));

var _fsExtra = require("fs-extra");

var _findCommand = _interopRequireDefault(require("./lib/findCommand"));

var _initTemporaryPackage = _interopRequireDefault(require("./lib/initTemporaryPackage"));

var _handleOptions = _interopRequireDefault(require("./lib/handleOptions"));

var _handleEnv = _interopRequireDefault(require("./lib/handleEnv"));

var _installDependencies = _interopRequireDefault(require("./lib/installDependencies"));

var _util = require("util");

var _logger = _interopRequireDefault(require("./lib/logger"));

var _binExists = _interopRequireDefault(require("bin-exists"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function YPX(_argv, inputArgv) {
  var _argv$package, _argv$_$;

  let argv = _argv;

  if (!((_argv$package = argv.package) === null || _argv$package === void 0 ? void 0 : _argv$package.length)) {
    throw new Error(`package name is need`);
  }

  argv = await (0, _handleOptions.default)(argv);

  if (argv._.length > 1) {
    throw new Error(`command not invalid, ${argv._}`);
  }

  let runtime = {
    tmpDir: await (0, _createTemporaryDirectory.default)(),
    created: false,
    skipInstall: {},
    console: (0, _logger.default)(argv)
  };
  const consoleShow = (0, _logger.default)({ ...argv,
    quiet: false
  });
  const {
    console
  } = runtime;
  let label = 'ypx';
  console.time(label);
  console.time(`installed`);
  await (0, _initTemporaryPackage.default)(runtime.tmpDir).tapCatch(e => {
    console.error(`failed create temp package, ${runtime.tmpDir}`);
  });
  await (0, _installDependencies.default)(argv, runtime);

  if (Object.keys(runtime.skipInstall).length) {
    console.info(`skip install`, (0, _util.inspect)(runtime.skipInstall), `or maybe u wanna use --ignore-existing`);
  }

  console.timeEnd(`installed`);
  let command = (_argv$_$ = argv._[0]) !== null && _argv$_$ !== void 0 ? _argv$_$ : argv.package[argv.package.length - 1];
  let cmd_exists;

  if (!(command in runtime.skipInstall)) {
    await (0, _findCommand.default)(command, runtime.tmpDir).catch(err => null).then(bin => {
      if (bin) {
        command = bin;
        cmd_exists = true;
      } else {
        cmd_exists = false;
      }
    });
  }

  if (!cmd_exists) {
    await (0, _binExists.default)(command).catch(e => null).then(bool => {
      if (bool) {
        console.warn(`found command '${command}', but it maybe not a module bin`);
      } else {
        console.warn(`command not found: ${command}, maybe will not callable`);
      }
    });
  }

  let env = runtime.env = await (0, _handleEnv.default)(argv, runtime);
  console.time(`exec`);
  console.debug(`[CWD]`, argv.cwd);

  if (argv.userconfig) {
    console.debug(`[RC]`, argv.userconfig);
  }

  console.debug(`[EXEC]`, command, argv['--']);
  await (0, _crossSpawnExtra.default)(command, argv['--'], {
    stdio: 'inherit',
    env,
    cwd: argv.cwd
  }).catch(e => {
    if (e.code === 'ENOENT') {
      consoleShow.magenta.error(`command not found: ${command}`);
      console.timeEnd(`exec`);
      console.timeEnd(label);
      process.exit(1);
    }

    return Promise.reject(e);
  });
  console.timeEnd(`exec`);
  console.time(`remove temp package`);
  await (0, _fsExtra.remove)(runtime.tmpDir);
  console.timeEnd(`remove temp package`);
  console.timeEnd(label);
}

var _default = YPX;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
