Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YPX = YPX;
exports.default = void 0;

var _crossSpawnExtra = _interopRequireDefault(require("cross-spawn-extra"));

var _createTemporaryDirectory = _interopRequireDefault(require("./lib/createTemporaryDirectory"));

var _fsExtra = require("fs-extra");

var _logger = _interopRequireDefault(require("debug-color2/logger"));

var _findCommand = _interopRequireDefault(require("./lib/findCommand"));

var _initTemporaryPackage = _interopRequireDefault(require("./lib/initTemporaryPackage"));

var _handleOptions = _interopRequireDefault(require("./lib/handleOptions"));

var _handleEnv = _interopRequireDefault(require("./lib/handleEnv"));

var _installDependencies = _interopRequireDefault(require("./lib/installDependencies"));

var _util = require("util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function YPX(_argv, inputArgv) {
  var _argv$package, _argv$_$;

  let argv = _argv;

  if (!((_argv$package = argv.package) === null || _argv$package === void 0 ? void 0 : _argv$package.length)) {
    throw new Error(`package name is need`);
  }

  argv = await (0, _handleOptions.default)(argv);
  let label = 'ypx';

  _logger.default.time(label);

  if (argv._.length > 1) {
    throw new Error(`command not invalid, ${argv._}`);
  }

  _logger.default.time(`installed`);

  let runtime = {
    tmpDir: await (0, _createTemporaryDirectory.default)(),
    created: false,
    skipInstall: {}
  };
  await (0, _initTemporaryPackage.default)(runtime.tmpDir).tapCatch(e => {
    _logger.default.error(`failed create temp package, ${runtime.tmpDir}`);
  });
  await (0, _installDependencies.default)(argv, runtime);

  if (Object.keys(runtime.skipInstall).length) {
    _logger.default.info(`skip install`, (0, _util.inspect)(runtime.skipInstall), `or maybe u wanna use --ignore-existing`);
  }

  _logger.default.timeEnd(`installed`);

  let command = (_argv$_$ = argv._[0]) !== null && _argv$_$ !== void 0 ? _argv$_$ : argv.package[argv.package.length - 1];

  if (!(command in runtime.skipInstall)) {
    await (0, _findCommand.default)(command, runtime.tmpDir).then(bin => {
      if (bin) {
        command = bin;
      }
    }).catch(err => null);
  }

  let env = runtime.env = await (0, _handleEnv.default)(argv, runtime);

  _logger.default.time(`exec`);

  _logger.default.debug(`[CWD]`, argv.cwd);

  _logger.default.debug(`[EXEC]`, command, argv['--']);

  await (0, _crossSpawnExtra.default)(command, argv['--'], {
    stdio: 'inherit',
    env,
    cwd: argv.cwd
  });

  _logger.default.timeEnd(`exec`);

  _logger.default.time(`remove temp package`);

  await (0, _fsExtra.remove)(runtime.tmpDir);

  _logger.default.timeEnd(`remove temp package`);

  _logger.default.timeEnd(label);
}

var _default = YPX;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIllQWCIsIl9hcmd2IiwiaW5wdXRBcmd2IiwiYXJndiIsInBhY2thZ2UiLCJsZW5ndGgiLCJFcnJvciIsImxhYmVsIiwiY29uc29sZSIsInRpbWUiLCJfIiwicnVudGltZSIsInRtcERpciIsImNyZWF0ZWQiLCJza2lwSW5zdGFsbCIsInRhcENhdGNoIiwiZSIsImVycm9yIiwiT2JqZWN0Iiwia2V5cyIsImluZm8iLCJ0aW1lRW5kIiwiY29tbWFuZCIsInRoZW4iLCJiaW4iLCJjYXRjaCIsImVyciIsImVudiIsImRlYnVnIiwiY3dkIiwic3RkaW8iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sZUFBZUEsR0FBZixDQUFtQkMsS0FBbkIsRUFBOENDLFNBQTlDLEVBQ1A7QUFBQTs7QUFDQyxNQUFJQyxJQUFJLEdBQUdGLEtBQVg7O0FBRUEsTUFBSSxtQkFBQ0UsSUFBSSxDQUFDQyxPQUFOLGtEQUFDLGNBQWNDLE1BQWYsQ0FBSixFQUNBO0FBQ0MsVUFBTSxJQUFJQyxLQUFKLENBQVcsc0JBQVgsQ0FBTjtBQUNBOztBQUVESCxFQUFBQSxJQUFJLEdBQUcsTUFBTSw0QkFBY0EsSUFBZCxDQUFiO0FBRUEsTUFBSUksS0FBSyxHQUFHLEtBQVo7O0FBRUFDLGtCQUFRQyxJQUFSLENBQWFGLEtBQWI7O0FBRUEsTUFBSUosSUFBSSxDQUFDTyxDQUFMLENBQU9MLE1BQVAsR0FBZ0IsQ0FBcEIsRUFDQTtBQUNDLFVBQU0sSUFBSUMsS0FBSixDQUFXLHdCQUF1QkgsSUFBSSxDQUFDTyxDQUFFLEVBQXpDLENBQU47QUFDQTs7QUFFREYsa0JBQVFDLElBQVIsQ0FBYyxXQUFkOztBQUVBLE1BQUlFLE9BQXNCLEdBQUc7QUFDNUJDLElBQUFBLE1BQU0sRUFBRSxNQUFNLHdDQURjO0FBRTVCQyxJQUFBQSxPQUFPLEVBQUUsS0FGbUI7QUFHNUJDLElBQUFBLFdBQVcsRUFBRTtBQUhlLEdBQTdCO0FBTUEsUUFBTSxtQ0FBcUJILE9BQU8sQ0FBQ0MsTUFBN0IsRUFDSkcsUUFESSxDQUNLQyxDQUFDLElBQ1g7QUFDQ1Isb0JBQVFTLEtBQVIsQ0FBZSwrQkFBOEJOLE9BQU8sQ0FBQ0MsTUFBTyxFQUE1RDtBQUNBLEdBSkksQ0FBTjtBQVNBLFFBQU0sa0NBQW9CVCxJQUFwQixFQUEwQlEsT0FBMUIsQ0FBTjs7QUFFQSxNQUFJTyxNQUFNLENBQUNDLElBQVAsQ0FBWVIsT0FBTyxDQUFDRyxXQUFwQixFQUFpQ1QsTUFBckMsRUFDQTtBQUNDRyxvQkFBUVksSUFBUixDQUFjLGNBQWQsRUFBNkIsbUJBQVFULE9BQU8sQ0FBQ0csV0FBaEIsQ0FBN0IsRUFBNEQsd0NBQTVEO0FBQ0E7O0FBRUROLGtCQUFRYSxPQUFSLENBQWlCLFdBQWpCOztBQUVBLE1BQUlDLE9BQU8sZUFBR25CLElBQUksQ0FBQ08sQ0FBTCxDQUFPLENBQVAsQ0FBSCwrQ0FBZ0JQLElBQUksQ0FBQ0MsT0FBTCxDQUFhRCxJQUFJLENBQUNDLE9BQUwsQ0FBYUMsTUFBYixHQUFzQixDQUFuQyxDQUEzQjs7QUFFQSxNQUFJLEVBQUVpQixPQUFPLElBQUlYLE9BQU8sQ0FBQ0csV0FBckIsQ0FBSixFQUNBO0FBQ0MsVUFBTSwwQkFBWVEsT0FBWixFQUFxQlgsT0FBTyxDQUFDQyxNQUE3QixFQUNKVyxJQURJLENBQ0NDLEdBQUcsSUFBSTtBQUVaLFVBQUlBLEdBQUosRUFDQTtBQUNDRixRQUFBQSxPQUFPLEdBQUdFLEdBQVY7QUFDQTtBQUNELEtBUEksRUFRSkMsS0FSSSxDQVFFQyxHQUFHLElBQUksSUFSVCxDQUFOO0FBVUE7O0FBRUQsTUFBSUMsR0FBRyxHQUFHaEIsT0FBTyxDQUFDZ0IsR0FBUixHQUFjLE1BQU0sd0JBQVV4QixJQUFWLEVBQWdCUSxPQUFoQixDQUE5Qjs7QUFFQUgsa0JBQVFDLElBQVIsQ0FBYyxNQUFkOztBQUVBRCxrQkFBUW9CLEtBQVIsQ0FBZSxPQUFmLEVBQXVCekIsSUFBSSxDQUFDMEIsR0FBNUI7O0FBQ0FyQixrQkFBUW9CLEtBQVIsQ0FBZSxRQUFmLEVBQXdCTixPQUF4QixFQUFpQ25CLElBQUksQ0FBQyxJQUFELENBQXJDOztBQUNBLFFBQU0sOEJBQWdCbUIsT0FBaEIsRUFBeUJuQixJQUFJLENBQUMsSUFBRCxDQUE3QixFQUFxQztBQUMxQzJCLElBQUFBLEtBQUssRUFBRSxTQURtQztBQUUxQ0gsSUFBQUEsR0FGMEM7QUFHMUNFLElBQUFBLEdBQUcsRUFBRTFCLElBQUksQ0FBQzBCO0FBSGdDLEdBQXJDLENBQU47O0FBTUFyQixrQkFBUWEsT0FBUixDQUFpQixNQUFqQjs7QUFFQWIsa0JBQVFDLElBQVIsQ0FBYyxxQkFBZDs7QUFDQSxRQUFNLHFCQUFPRSxPQUFPLENBQUNDLE1BQWYsQ0FBTjs7QUFDQUosa0JBQVFhLE9BQVIsQ0FBaUIscUJBQWpCOztBQUVBYixrQkFBUWEsT0FBUixDQUFnQmQsS0FBaEI7QUFDQTs7ZUFFY1AsRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMjAvMS8yOC5cbiAqL1xuXG5pbXBvcnQgY3Jvc3NTcGF3bkV4dHJhIGZyb20gJ2Nyb3NzLXNwYXduLWV4dHJhJztcbmltcG9ydCBjcmVhdGVUZW1wb3JhcnlEaXJlY3RvcnkgZnJvbSAnLi9saWIvY3JlYXRlVGVtcG9yYXJ5RGlyZWN0b3J5JztcbmltcG9ydCB7IHJlbW92ZSB9IGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBjb25zb2xlIGZyb20gJ2RlYnVnLWNvbG9yMi9sb2dnZXInXG5pbXBvcnQgZmluZENvbW1hbmQgZnJvbSAnLi9saWIvZmluZENvbW1hbmQnO1xuaW1wb3J0IHsgcGF0aEVudiB9IGZyb20gJ3BhdGgtZW52J1xuaW1wb3J0IGluaXRUZW1wb3JhcnlQYWNrYWdlIGZyb20gJy4vbGliL2luaXRUZW1wb3JhcnlQYWNrYWdlJztcbmltcG9ydCB7IElZUFhBcmd1bWVudHNJbnB1dCwgSVJ1bnRpbWVDYWNoZSwgSVlQWEFyZ3VtZW50cyB9IGZyb20gJy4vbGliL3R5cGVzJztcbmltcG9ydCBoYW5kbGVPcHRpb25zIGZyb20gJy4vbGliL2hhbmRsZU9wdGlvbnMnO1xuaW1wb3J0IGhhbmRsZUVudiBmcm9tICcuL2xpYi9oYW5kbGVFbnYnO1xuaW1wb3J0IGluc3RhbGxEZXBlbmRlbmNpZXMgZnJvbSAnLi9saWIvaW5zdGFsbERlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAndXRpbCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBZUFgoX2FyZ3Y6IElZUFhBcmd1bWVudHNJbnB1dCwgaW5wdXRBcmd2Pzogc3RyaW5nW10pXG57XG5cdGxldCBhcmd2ID0gX2FyZ3YgYXMgUmVxdWlyZWQ8SVlQWEFyZ3VtZW50cz47XG5cblx0aWYgKCFhcmd2LnBhY2thZ2U/Lmxlbmd0aClcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvcihgcGFja2FnZSBuYW1lIGlzIG5lZWRgKVxuXHR9XG5cblx0YXJndiA9IGF3YWl0IGhhbmRsZU9wdGlvbnMoYXJndik7XG5cblx0bGV0IGxhYmVsID0gJ3lweCc7XG5cblx0Y29uc29sZS50aW1lKGxhYmVsKTtcblxuXHRpZiAoYXJndi5fLmxlbmd0aCA+IDEpXG5cdHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGNvbW1hbmQgbm90IGludmFsaWQsICR7YXJndi5ffWApXG5cdH1cblxuXHRjb25zb2xlLnRpbWUoYGluc3RhbGxlZGApO1xuXG5cdGxldCBydW50aW1lOiBJUnVudGltZUNhY2hlID0ge1xuXHRcdHRtcERpcjogYXdhaXQgY3JlYXRlVGVtcG9yYXJ5RGlyZWN0b3J5KCksXG5cdFx0Y3JlYXRlZDogZmFsc2UsXG5cdFx0c2tpcEluc3RhbGw6IHt9LFxuXHR9O1xuXG5cdGF3YWl0IGluaXRUZW1wb3JhcnlQYWNrYWdlKHJ1bnRpbWUudG1wRGlyKVxuXHRcdC50YXBDYXRjaChlID0+XG5cdFx0e1xuXHRcdFx0Y29uc29sZS5lcnJvcihgZmFpbGVkIGNyZWF0ZSB0ZW1wIHBhY2thZ2UsICR7cnVudGltZS50bXBEaXJ9YClcblx0XHR9KVxuXHQ7XG5cblx0Ly9jb25zb2xlLmRpcihhcmd2KTtcblxuXHRhd2FpdCBpbnN0YWxsRGVwZW5kZW5jaWVzKGFyZ3YsIHJ1bnRpbWUpO1xuXG5cdGlmIChPYmplY3Qua2V5cyhydW50aW1lLnNraXBJbnN0YWxsKS5sZW5ndGgpXG5cdHtcblx0XHRjb25zb2xlLmluZm8oYHNraXAgaW5zdGFsbGAsIGluc3BlY3QocnVudGltZS5za2lwSW5zdGFsbCksIGBvciBtYXliZSB1IHdhbm5hIHVzZSAtLWlnbm9yZS1leGlzdGluZ2ApXG5cdH1cblxuXHRjb25zb2xlLnRpbWVFbmQoYGluc3RhbGxlZGApO1xuXG5cdGxldCBjb21tYW5kID0gYXJndi5fWzBdID8/IGFyZ3YucGFja2FnZVthcmd2LnBhY2thZ2UubGVuZ3RoIC0gMV07XG5cblx0aWYgKCEoY29tbWFuZCBpbiBydW50aW1lLnNraXBJbnN0YWxsKSlcblx0e1xuXHRcdGF3YWl0IGZpbmRDb21tYW5kKGNvbW1hbmQsIHJ1bnRpbWUudG1wRGlyKVxuXHRcdFx0LnRoZW4oYmluID0+IHtcblx0XHRcdFx0Ly9jb25zb2xlLmRlYnVnKGNvbW1hbmQsIGA9PmAsIGJpbik7XG5cdFx0XHRcdGlmIChiaW4pXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjb21tYW5kID0gYmluO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGVyciA9PiBudWxsKVxuXHRcdDtcblx0fVxuXG5cdGxldCBlbnYgPSBydW50aW1lLmVudiA9IGF3YWl0IGhhbmRsZUVudihhcmd2LCBydW50aW1lKTtcblxuXHRjb25zb2xlLnRpbWUoYGV4ZWNgKTtcblxuXHRjb25zb2xlLmRlYnVnKGBbQ1dEXWAsIGFyZ3YuY3dkKTtcblx0Y29uc29sZS5kZWJ1ZyhgW0VYRUNdYCwgY29tbWFuZCwgYXJndlsnLS0nXSk7XG5cdGF3YWl0IGNyb3NzU3Bhd25FeHRyYShjb21tYW5kLCBhcmd2WyctLSddLCB7XG5cdFx0c3RkaW86ICdpbmhlcml0Jyxcblx0XHRlbnYsXG5cdFx0Y3dkOiBhcmd2LmN3ZCxcblx0fSk7XG5cblx0Y29uc29sZS50aW1lRW5kKGBleGVjYCk7XG5cblx0Y29uc29sZS50aW1lKGByZW1vdmUgdGVtcCBwYWNrYWdlYCk7XG5cdGF3YWl0IHJlbW92ZShydW50aW1lLnRtcERpcik7XG5cdGNvbnNvbGUudGltZUVuZChgcmVtb3ZlIHRlbXAgcGFja2FnZWApO1xuXG5cdGNvbnNvbGUudGltZUVuZChsYWJlbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFlQWDtcbiJdfQ==
