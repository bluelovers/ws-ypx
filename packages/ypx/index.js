Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YPX = YPX;
exports.default = void 0;

var _crossSpawnExtra = _interopRequireDefault(require("cross-spawn-extra"));

var _createTemporaryDirectory = _interopRequireDefault(require("./lib/createTemporaryDirectory"));

var _fsExtra = require("fs-extra");

var _findCommand = _interopRequireDefault(require("./lib/findCommand"));

var _initTemporaryPackage = _interopRequireDefault(require("./lib/initTemporaryPackage"));

var _handleOptions = _interopRequireDefault(require("./lib/handleOptions"));

var _handleEnv = _interopRequireDefault(require("./lib/handleEnv"));

var _installDependencies = _interopRequireDefault(require("./lib/installDependencies"));

var _util = require("util");

var _logger = _interopRequireDefault(require("./lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function YPX(_argv, inputArgv) {
  var _argv$package, _argv$_$;

  let argv = _argv;

  if (!((_argv$package = argv.package) === null || _argv$package === void 0 ? void 0 : _argv$package.length)) {
    throw new Error(`package name is need`);
  }

  argv = await (0, _handleOptions.default)(argv);

  if (argv._.length > 1) {
    throw new Error(`command not invalid, ${argv._}`);
  }

  let runtime = {
    tmpDir: await (0, _createTemporaryDirectory.default)(),
    created: false,
    skipInstall: {},
    console: (0, _logger.default)(argv)
  };
  const {
    console
  } = runtime;
  let label = 'ypx';
  console.time(label);
  console.time(`installed`);
  await (0, _initTemporaryPackage.default)(runtime.tmpDir).tapCatch(e => {
    console.error(`failed create temp package, ${runtime.tmpDir}`);
  });
  await (0, _installDependencies.default)(argv, runtime);

  if (Object.keys(runtime.skipInstall).length) {
    console.info(`skip install`, (0, _util.inspect)(runtime.skipInstall), `or maybe u wanna use --ignore-existing`);
  }

  console.timeEnd(`installed`);
  let command = (_argv$_$ = argv._[0]) !== null && _argv$_$ !== void 0 ? _argv$_$ : argv.package[argv.package.length - 1];

  if (!(command in runtime.skipInstall)) {
    await (0, _findCommand.default)(command, runtime.tmpDir).then(bin => {
      if (bin) {
        command = bin;
      }
    }).catch(err => null);
  }

  let env = runtime.env = await (0, _handleEnv.default)(argv, runtime);
  console.time(`exec`);
  console.debug(`[CWD]`, argv.cwd);
  console.debug(`[EXEC]`, command, argv['--']);
  await (0, _crossSpawnExtra.default)(command, argv['--'], {
    stdio: 'inherit',
    env,
    cwd: argv.cwd
  });
  console.timeEnd(`exec`);
  console.time(`remove temp package`);
  await (0, _fsExtra.remove)(runtime.tmpDir);
  console.timeEnd(`remove temp package`);
  console.timeEnd(label);
}

var _default = YPX;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIllQWCIsIl9hcmd2IiwiaW5wdXRBcmd2IiwiYXJndiIsInBhY2thZ2UiLCJsZW5ndGgiLCJFcnJvciIsIl8iLCJydW50aW1lIiwidG1wRGlyIiwiY3JlYXRlZCIsInNraXBJbnN0YWxsIiwiY29uc29sZSIsImxhYmVsIiwidGltZSIsInRhcENhdGNoIiwiZSIsImVycm9yIiwiT2JqZWN0Iiwia2V5cyIsImluZm8iLCJ0aW1lRW5kIiwiY29tbWFuZCIsInRoZW4iLCJiaW4iLCJjYXRjaCIsImVyciIsImVudiIsImRlYnVnIiwiY3dkIiwic3RkaW8iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sZUFBZUEsR0FBZixDQUFtQkMsS0FBbkIsRUFBOENDLFNBQTlDLEVBQ1A7QUFBQTs7QUFDQyxNQUFJQyxJQUFJLEdBQUdGLEtBQVg7O0FBRUEsTUFBSSxtQkFBQ0UsSUFBSSxDQUFDQyxPQUFOLGtEQUFDLGNBQWNDLE1BQWYsQ0FBSixFQUNBO0FBQ0MsVUFBTSxJQUFJQyxLQUFKLENBQVcsc0JBQVgsQ0FBTjtBQUNBOztBQUVESCxFQUFBQSxJQUFJLEdBQUcsTUFBTSw0QkFBY0EsSUFBZCxDQUFiOztBQUVBLE1BQUlBLElBQUksQ0FBQ0ksQ0FBTCxDQUFPRixNQUFQLEdBQWdCLENBQXBCLEVBQ0E7QUFDQyxVQUFNLElBQUlDLEtBQUosQ0FBVyx3QkFBdUJILElBQUksQ0FBQ0ksQ0FBRSxFQUF6QyxDQUFOO0FBQ0E7O0FBRUQsTUFBSUMsT0FBc0IsR0FBRztBQUM1QkMsSUFBQUEsTUFBTSxFQUFFLE1BQU0sd0NBRGM7QUFFNUJDLElBQUFBLE9BQU8sRUFBRSxLQUZtQjtBQUc1QkMsSUFBQUEsV0FBVyxFQUFFLEVBSGU7QUFJNUJDLElBQUFBLE9BQU8sRUFBRSxxQkFBVVQsSUFBVjtBQUptQixHQUE3QjtBQU9BLFFBQU07QUFBRVMsSUFBQUE7QUFBRixNQUFjSixPQUFwQjtBQUVBLE1BQUlLLEtBQUssR0FBRyxLQUFaO0FBRUFELEVBQUFBLE9BQU8sQ0FBQ0UsSUFBUixDQUFhRCxLQUFiO0FBQ0FELEVBQUFBLE9BQU8sQ0FBQ0UsSUFBUixDQUFjLFdBQWQ7QUFFQSxRQUFNLG1DQUFxQk4sT0FBTyxDQUFDQyxNQUE3QixFQUNKTSxRQURJLENBQ0tDLENBQUMsSUFDWDtBQUNDSixJQUFBQSxPQUFPLENBQUNLLEtBQVIsQ0FBZSwrQkFBOEJULE9BQU8sQ0FBQ0MsTUFBTyxFQUE1RDtBQUNBLEdBSkksQ0FBTjtBQVNBLFFBQU0sa0NBQW9CTixJQUFwQixFQUEwQkssT0FBMUIsQ0FBTjs7QUFFQSxNQUFJVSxNQUFNLENBQUNDLElBQVAsQ0FBWVgsT0FBTyxDQUFDRyxXQUFwQixFQUFpQ04sTUFBckMsRUFDQTtBQUNDTyxJQUFBQSxPQUFPLENBQUNRLElBQVIsQ0FBYyxjQUFkLEVBQTZCLG1CQUFRWixPQUFPLENBQUNHLFdBQWhCLENBQTdCLEVBQTRELHdDQUE1RDtBQUNBOztBQUVEQyxFQUFBQSxPQUFPLENBQUNTLE9BQVIsQ0FBaUIsV0FBakI7QUFFQSxNQUFJQyxPQUFPLGVBQUduQixJQUFJLENBQUNJLENBQUwsQ0FBTyxDQUFQLENBQUgsK0NBQWdCSixJQUFJLENBQUNDLE9BQUwsQ0FBYUQsSUFBSSxDQUFDQyxPQUFMLENBQWFDLE1BQWIsR0FBc0IsQ0FBbkMsQ0FBM0I7O0FBRUEsTUFBSSxFQUFFaUIsT0FBTyxJQUFJZCxPQUFPLENBQUNHLFdBQXJCLENBQUosRUFDQTtBQUNDLFVBQU0sMEJBQVlXLE9BQVosRUFBcUJkLE9BQU8sQ0FBQ0MsTUFBN0IsRUFDSmMsSUFESSxDQUNDQyxHQUFHLElBQUk7QUFFWixVQUFJQSxHQUFKLEVBQ0E7QUFDQ0YsUUFBQUEsT0FBTyxHQUFHRSxHQUFWO0FBQ0E7QUFDRCxLQVBJLEVBUUpDLEtBUkksQ0FRRUMsR0FBRyxJQUFJLElBUlQsQ0FBTjtBQVVBOztBQUVELE1BQUlDLEdBQUcsR0FBR25CLE9BQU8sQ0FBQ21CLEdBQVIsR0FBYyxNQUFNLHdCQUFVeEIsSUFBVixFQUFnQkssT0FBaEIsQ0FBOUI7QUFFQUksRUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWMsTUFBZDtBQUVBRixFQUFBQSxPQUFPLENBQUNnQixLQUFSLENBQWUsT0FBZixFQUF1QnpCLElBQUksQ0FBQzBCLEdBQTVCO0FBQ0FqQixFQUFBQSxPQUFPLENBQUNnQixLQUFSLENBQWUsUUFBZixFQUF3Qk4sT0FBeEIsRUFBaUNuQixJQUFJLENBQUMsSUFBRCxDQUFyQztBQUNBLFFBQU0sOEJBQWdCbUIsT0FBaEIsRUFBeUJuQixJQUFJLENBQUMsSUFBRCxDQUE3QixFQUFxQztBQUMxQzJCLElBQUFBLEtBQUssRUFBRSxTQURtQztBQUUxQ0gsSUFBQUEsR0FGMEM7QUFHMUNFLElBQUFBLEdBQUcsRUFBRTFCLElBQUksQ0FBQzBCO0FBSGdDLEdBQXJDLENBQU47QUFNQWpCLEVBQUFBLE9BQU8sQ0FBQ1MsT0FBUixDQUFpQixNQUFqQjtBQUVBVCxFQUFBQSxPQUFPLENBQUNFLElBQVIsQ0FBYyxxQkFBZDtBQUNBLFFBQU0scUJBQU9OLE9BQU8sQ0FBQ0MsTUFBZixDQUFOO0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ1MsT0FBUixDQUFpQixxQkFBakI7QUFFQVQsRUFBQUEsT0FBTyxDQUFDUyxPQUFSLENBQWdCUixLQUFoQjtBQUNBOztlQUVjYixHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAyMC8xLzI4LlxuICovXG5cbmltcG9ydCBjcm9zc1NwYXduRXh0cmEgZnJvbSAnY3Jvc3Mtc3Bhd24tZXh0cmEnO1xuaW1wb3J0IGNyZWF0ZVRlbXBvcmFyeURpcmVjdG9yeSBmcm9tICcuL2xpYi9jcmVhdGVUZW1wb3JhcnlEaXJlY3RvcnknO1xuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IGZpbmRDb21tYW5kIGZyb20gJy4vbGliL2ZpbmRDb21tYW5kJztcbmltcG9ydCBpbml0VGVtcG9yYXJ5UGFja2FnZSBmcm9tICcuL2xpYi9pbml0VGVtcG9yYXJ5UGFja2FnZSc7XG5pbXBvcnQgeyBJWVBYQXJndW1lbnRzSW5wdXQsIElSdW50aW1lQ2FjaGUsIElZUFhBcmd1bWVudHMgfSBmcm9tICcuL2xpYi90eXBlcyc7XG5pbXBvcnQgaGFuZGxlT3B0aW9ucyBmcm9tICcuL2xpYi9oYW5kbGVPcHRpb25zJztcbmltcG9ydCBoYW5kbGVFbnYgZnJvbSAnLi9saWIvaGFuZGxlRW52JztcbmltcG9ydCBpbnN0YWxsRGVwZW5kZW5jaWVzIGZyb20gJy4vbGliL2luc3RhbGxEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IG5ld0xvZ2dlciBmcm9tICcuL2xpYi9sb2dnZXInO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gWVBYKF9hcmd2OiBJWVBYQXJndW1lbnRzSW5wdXQsIGlucHV0QXJndj86IHN0cmluZ1tdKVxue1xuXHRsZXQgYXJndiA9IF9hcmd2IGFzIFJlcXVpcmVkPElZUFhBcmd1bWVudHM+O1xuXG5cdGlmICghYXJndi5wYWNrYWdlPy5sZW5ndGgpXG5cdHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYHBhY2thZ2UgbmFtZSBpcyBuZWVkYClcblx0fVxuXG5cdGFyZ3YgPSBhd2FpdCBoYW5kbGVPcHRpb25zKGFyZ3YpO1xuXG5cdGlmIChhcmd2Ll8ubGVuZ3RoID4gMSlcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvcihgY29tbWFuZCBub3QgaW52YWxpZCwgJHthcmd2Ll99YClcblx0fVxuXG5cdGxldCBydW50aW1lOiBJUnVudGltZUNhY2hlID0ge1xuXHRcdHRtcERpcjogYXdhaXQgY3JlYXRlVGVtcG9yYXJ5RGlyZWN0b3J5KCksXG5cdFx0Y3JlYXRlZDogZmFsc2UsXG5cdFx0c2tpcEluc3RhbGw6IHt9LFxuXHRcdGNvbnNvbGU6IG5ld0xvZ2dlcihhcmd2KVxuXHR9O1xuXG5cdGNvbnN0IHsgY29uc29sZSB9ID0gcnVudGltZTtcblxuXHRsZXQgbGFiZWwgPSAneXB4JztcblxuXHRjb25zb2xlLnRpbWUobGFiZWwpO1xuXHRjb25zb2xlLnRpbWUoYGluc3RhbGxlZGApO1xuXG5cdGF3YWl0IGluaXRUZW1wb3JhcnlQYWNrYWdlKHJ1bnRpbWUudG1wRGlyKVxuXHRcdC50YXBDYXRjaChlID0+XG5cdFx0e1xuXHRcdFx0Y29uc29sZS5lcnJvcihgZmFpbGVkIGNyZWF0ZSB0ZW1wIHBhY2thZ2UsICR7cnVudGltZS50bXBEaXJ9YClcblx0XHR9KVxuXHQ7XG5cblx0Ly9jb25zb2xlLmRpcihhcmd2KTtcblxuXHRhd2FpdCBpbnN0YWxsRGVwZW5kZW5jaWVzKGFyZ3YsIHJ1bnRpbWUpO1xuXG5cdGlmIChPYmplY3Qua2V5cyhydW50aW1lLnNraXBJbnN0YWxsKS5sZW5ndGgpXG5cdHtcblx0XHRjb25zb2xlLmluZm8oYHNraXAgaW5zdGFsbGAsIGluc3BlY3QocnVudGltZS5za2lwSW5zdGFsbCksIGBvciBtYXliZSB1IHdhbm5hIHVzZSAtLWlnbm9yZS1leGlzdGluZ2ApXG5cdH1cblxuXHRjb25zb2xlLnRpbWVFbmQoYGluc3RhbGxlZGApO1xuXG5cdGxldCBjb21tYW5kID0gYXJndi5fWzBdID8/IGFyZ3YucGFja2FnZVthcmd2LnBhY2thZ2UubGVuZ3RoIC0gMV07XG5cblx0aWYgKCEoY29tbWFuZCBpbiBydW50aW1lLnNraXBJbnN0YWxsKSlcblx0e1xuXHRcdGF3YWl0IGZpbmRDb21tYW5kKGNvbW1hbmQsIHJ1bnRpbWUudG1wRGlyKVxuXHRcdFx0LnRoZW4oYmluID0+IHtcblx0XHRcdFx0Ly9jb25zb2xlLmRlYnVnKGNvbW1hbmQsIGA9PmAsIGJpbik7XG5cdFx0XHRcdGlmIChiaW4pXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjb21tYW5kID0gYmluO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGVyciA9PiBudWxsKVxuXHRcdDtcblx0fVxuXG5cdGxldCBlbnYgPSBydW50aW1lLmVudiA9IGF3YWl0IGhhbmRsZUVudihhcmd2LCBydW50aW1lKTtcblxuXHRjb25zb2xlLnRpbWUoYGV4ZWNgKTtcblxuXHRjb25zb2xlLmRlYnVnKGBbQ1dEXWAsIGFyZ3YuY3dkKTtcblx0Y29uc29sZS5kZWJ1ZyhgW0VYRUNdYCwgY29tbWFuZCwgYXJndlsnLS0nXSk7XG5cdGF3YWl0IGNyb3NzU3Bhd25FeHRyYShjb21tYW5kLCBhcmd2WyctLSddLCB7XG5cdFx0c3RkaW86ICdpbmhlcml0Jyxcblx0XHRlbnYsXG5cdFx0Y3dkOiBhcmd2LmN3ZCxcblx0fSk7XG5cblx0Y29uc29sZS50aW1lRW5kKGBleGVjYCk7XG5cblx0Y29uc29sZS50aW1lKGByZW1vdmUgdGVtcCBwYWNrYWdlYCk7XG5cdGF3YWl0IHJlbW92ZShydW50aW1lLnRtcERpcik7XG5cdGNvbnNvbGUudGltZUVuZChgcmVtb3ZlIHRlbXAgcGFja2FnZWApO1xuXG5cdGNvbnNvbGUudGltZUVuZChsYWJlbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFlQWDtcbiJdfQ==
